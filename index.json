{
    message: 'Request failed with status code 500',
    name: 'AxiosError',
    code: 'ERR_BAD_RESPONSE',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: null
      },
      validateStatus: [Function: validateStatus],
      headers: AxiosHeaders {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/1.4.0',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'get',
      url: 'http://localhost:4000/data',
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(async_id_symbol)]: 173566,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /data HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.4.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:4000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *4> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:4000:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(async_id_symbol)]: 173566,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(RequestTimeout)]: undefined
            },
            <ref *3> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [
                  [Function: onReadableStreamEnd],
                  [Function: socketOnEnd]
                ],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                data: [Function: socketOnData],
                drain: [Function: ondrain]
              },
              _eventsCount: 8,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: <ref *5> HTTPParser {
                '0': null,
                '1': [Function: parserOnHeaders],
                '2': [Function: parserOnHeadersComplete],
                '3': [Function: parserOnBody],
                '4': [Function: parserOnMessageComplete],
                '5': null,
                '6': null,
                _headers: [],
                _url: '',
                socket: [Circular *3],
                incoming: null,
                outgoing: <ref *6> ClientRequest {
                  _events: [Object: null prototype] {
                    response: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    abort: [Function (anonymous)],
                    aborted: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    error: [Function (anonymous)],
                    socket: [Function (anonymous)],
                    timeout: [Function (anonymous)]
                  },
                  _eventsCount: 7,
                  _maxListeners: undefined,
                  outputData: [],
                  outputSize: 0,
                  writable: true,
                  destroyed: false,
                  _last: true,
                  chunkedEncoding: false,
                  shouldKeepAlive: false,
                  maxRequestsOnConnectionReached: false,
                  _defaultKeepAlive: true,
                  useChunkedEncodingByDefault: true,
                  sendDate: false,
                  _removedConnection: false,
                  _removedContLen: false,
                  _removedTE: false,
                  strictContentLength: false,
                  _contentLength: '789',
                  _hasBody: true,
                  _trailer: '',
                  finished: true,
                  _headerSent: true,
                  _closed: false,
                  socket: [Circular *3],
                  _header: 'PUT /rooms HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'User-Agent: axios/1.4.0\r\n' +
                    'Content-Length: 789\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:4000\r\n' +
                    'Connection: close\r\n' +
                    '\r\n',
                  _keepAliveTimeout: 0,
                  _onPendingData: [Function: nop],
                  agent: [Circular *4],
                  socketPath: undefined,
                  method: 'PUT',
                  maxHeaderSize: undefined,
                  insecureHTTPParser: undefined,
                  path: '/rooms',
                  _ended: false,
                  res: null,
                  aborted: false,
                  timeoutCb: null,
                  upgradeOrConnect: false,
                  parser: [Circular *5],
                  maxHeadersCount: null,
                  reusedSocket: false,
                  host: 'localhost',
                  protocol: 'http:',
                  _redirectable: Writable {
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: true,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: true,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    _events: [Object: null prototype] {
                      response: [Function: handleResponse],
                      error: [Function: handleRequestError],
                      socket: [Function: handleRequestSocket]
                    },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    _options: {
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'http:',
                      path: '/rooms',
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.4.0',
                        'Content-Length': '789',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      lookup: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'localhost',
                      port: '4000',
                      agent: undefined,
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] { path: null },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: {
                              map: {
                                'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 3a a5 07 79 db 6d 80 6d 6d bd af bd b3 cc c1 37 b0 5a f5 9f 02 de 12 de 25 ca 4c 06 26 ec 9e 3b 04 ... 1708 more bytes>
                              },
                              list: [ 'screeps.com:443:::::::::::::::::::::' ]
                            },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/rooms'
                    },
                    _ended: true,
                    _ending: true,
                    _redirectCount: 0,
                    _redirects: [],
                    _requestBodyLength: 789,
                    _requestBodyBuffers: [
                      {
                        data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                        encoding: undefined
                      }
                    ],
                    _onNativeResponse: [Function (anonymous)],
                    _currentRequest: [Circular *6],
                    _currentUrl: 'http://localhost:4000/rooms',
                    [Symbol(kCapture)]: false
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(kEndCalled)]: true,
                  [Symbol(kNeedDrain)]: false,
                  [Symbol(corked)]: 0,
                  [Symbol(kOutHeaders)]: [Object: null prototype] {
                    accept: [ 'Accept', 'application/json, text/plain, */*' ],
                    'content-type': [ 'Content-Type', 'application/json' ],
                    'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                    'content-length': [ 'Content-Length', '789' ],
                    'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                    host: [ 'Host', 'localhost:4000' ]
                  },
                  [Symbol(kUniqueHeaders)]: null
                },
                maxHeaderPairs: 2000,
                _consumed: false,
                onIncoming: [Function: parserOnIncomingClient],
                [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                  type: 'HTTPINCOMINGMESSAGE',
                  req: <ref *6> ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '789',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *3],
                    _header: 'PUT /rooms HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.4.0\r\n' +
                      'Content-Length: 789\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:4000\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *4],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    path: '/rooms',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: [Circular *5],
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'localhost',
                    protocol: 'http:',
                    _redirectable: Writable {
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: false,
                        decodeStrings: true,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: true,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: true,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      _events: [Object: null prototype] {
                        response: [Function: handleResponse],
                        error: [Function: handleRequestError],
                        socket: [Function: handleRequestSocket]
                      },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      _options: {
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'http:',
                        path: '/rooms',
                        method: 'PUT',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.4.0',
                          'Content-Length': '789',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        lookup: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'localhost',
                        port: '4000',
                        agent: undefined,
                        nativeProtocols: {
                          'http:': {
                            _connectionListener: [Function: connectionListener],
                            METHODS: [
                              'ACL',         'BIND',       'CHECKOUT',
                              'CONNECT',     'COPY',       'DELETE',
                              'GET',         'HEAD',       'LINK',
                              'LOCK',        'M-SEARCH',   'MERGE',
                              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                              'MOVE',        'NOTIFY',     'OPTIONS',
                              'PATCH',       'POST',       'PROPFIND',
                              'PROPPATCH',   'PURGE',      'PUT',
                              'REBIND',      'REPORT',     'SEARCH',
                              'SOURCE',      'SUBSCRIBE',  'TRACE',
                              'UNBIND',      'UNLINK',     'UNLOCK',
                              'UNSUBSCRIBE'
                            ],
                            STATUS_CODES: {
                              '100': 'Continue',
                              '101': 'Switching Protocols',
                              '102': 'Processing',
                              '103': 'Early Hints',
                              '200': 'OK',
                              '201': 'Created',
                              '202': 'Accepted',
                              '203': 'Non-Authoritative Information',
                              '204': 'No Content',
                              '205': 'Reset Content',
                              '206': 'Partial Content',
                              '207': 'Multi-Status',
                              '208': 'Already Reported',
                              '226': 'IM Used',
                              '300': 'Multiple Choices',
                              '301': 'Moved Permanently',
                              '302': 'Found',
                              '303': 'See Other',
                              '304': 'Not Modified',
                              '305': 'Use Proxy',
                              '307': 'Temporary Redirect',
                              '308': 'Permanent Redirect',
                              '400': 'Bad Request',
                              '401': 'Unauthorized',
                              '402': 'Payment Required',
                              '403': 'Forbidden',
                              '404': 'Not Found',
                              '405': 'Method Not Allowed',
                              '406': 'Not Acceptable',
                              '407': 'Proxy Authentication Required',
                              '408': 'Request Timeout',
                              '409': 'Conflict',
                              '410': 'Gone',
                              '411': 'Length Required',
                              '412': 'Precondition Failed',
                              '413': 'Payload Too Large',
                              '414': 'URI Too Long',
                              '415': 'Unsupported Media Type',
                              '416': 'Range Not Satisfiable',
                              '417': 'Expectation Failed',
                              '418': "I'm a Teapot",
                              '421': 'Misdirected Request',
                              '422': 'Unprocessable Entity',
                              '423': 'Locked',
                              '424': 'Failed Dependency',
                              '425': 'Too Early',
                              '426': 'Upgrade Required',
                              '428': 'Precondition Required',
                              '429': 'Too Many Requests',
                              '431': 'Request Header Fields Too Large',
                              '451': 'Unavailable For Legal Reasons',
                              '500': 'Internal Server Error',
                              '501': 'Not Implemented',
                              '502': 'Bad Gateway',
                              '503': 'Service Unavailable',
                              '504': 'Gateway Timeout',
                              '505': 'HTTP Version Not Supported',
                              '506': 'Variant Also Negotiates',
                              '507': 'Insufficient Storage',
                              '508': 'Loop Detected',
                              '509': 'Bandwidth Limit Exceeded',
                              '510': 'Not Extended',
                              '511': 'Network Authentication Required'
                            },
                            Agent: [Function: Agent] {
                              defaultMaxSockets: Infinity
                            },
                            ClientRequest: [Function: ClientRequest],
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            validateHeaderName: [Function: __node_internal_],
                            validateHeaderValue: [Function: __node_internal_],
                            get: [Function: get],
                            request: [Function: request],
                            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                            maxHeaderSize: [Getter],
                            globalAgent: [Getter/Setter]
                          },
                          'https:': {
                            Agent: [Function: Agent],
                            globalAgent: Agent {
                              _events: [Object: null prototype] {
                                free: [Function (anonymous)],
                                newListener: [Function: maybeEnableKeylog]
                              },
                              _eventsCount: 2,
                              _maxListeners: undefined,
                              defaultPort: 443,
                              protocol: 'https:',
                              options: [Object: null prototype] { path: null },
                              requests: [Object: null prototype] {},
                              sockets: [Object: null prototype] {},
                              freeSockets: [Object: null prototype] {},
                              keepAliveMsecs: 1000,
                              keepAlive: false,
                              maxSockets: Infinity,
                              maxFreeSockets: 256,
                              scheduling: 'lifo',
                              maxTotalSockets: Infinity,
                              totalSocketCount: 0,
                              maxCachedSessions: 100,
                              _sessionCache: {
                                map: {
                                  'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 3a a5 07 79 db 6d 80 6d 6d bd af bd b3 cc c1 37 b0 5a f5 9f 02 de 12 de 25 ca 4c 06 26 ec 9e 3b 04 ... 1708 more bytes>
                                },
                                list: [
                                  'screeps.com:443:::::::::::::::::::::'
                                ]
                              },
                              [Symbol(kCapture)]: false
                            },
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request]
                          }
                        },
                        pathname: '/rooms'
                      },
                      _ended: true,
                      _ending: true,
                      _redirectCount: 0,
                      _redirects: [],
                      _requestBodyLength: 789,
                      _requestBodyBuffers: [
                        {
                          data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                          encoding: undefined
                        }
                      ],
                      _onNativeResponse: [Function (anonymous)],
                      _currentRequest: [Circular *6],
                      _currentUrl: 'http://localhost:4000/rooms',
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kEndCalled)]: true,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                      'content-length': [ 'Content-Length', '789' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'localhost:4000' ]
                    },
                    [Symbol(kUniqueHeaders)]: null
                  }
                }
              },
              _httpMessage: <ref *6> ClientRequest {
                _events: [Object: null prototype] {
                  response: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  abort: [Function (anonymous)],
                  aborted: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  error: [Function (anonymous)],
                  socket: [Function (anonymous)],
                  timeout: [Function (anonymous)]
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                outputData: [],
                outputSize: 0,
                writable: true,
                destroyed: false,
                _last: true,
                chunkedEncoding: false,
                shouldKeepAlive: false,
                maxRequestsOnConnectionReached: false,
                _defaultKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: false,
                _removedConnection: false,
                _removedContLen: false,
                _removedTE: false,
                strictContentLength: false,
                _contentLength: '789',
                _hasBody: true,
                _trailer: '',
                finished: true,
                _headerSent: true,
                _closed: false,
                socket: [Circular *3],
                _header: 'PUT /rooms HTTP/1.1\r\n' +
                  'Accept: application/json, text/plain, */*\r\n' +
                  'Content-Type: application/json\r\n' +
                  'User-Agent: axios/1.4.0\r\n' +
                  'Content-Length: 789\r\n' +
                  'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                  'Host: localhost:4000\r\n' +
                  'Connection: close\r\n' +
                  '\r\n',
                _keepAliveTimeout: 0,
                _onPendingData: [Function: nop],
                agent: [Circular *4],
                socketPath: undefined,
                method: 'PUT',
                maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                path: '/rooms',
                _ended: false,
                res: null,
                aborted: false,
                timeoutCb: null,
                upgradeOrConnect: false,
                parser: <ref *5> HTTPParser {
                  '0': null,
                  '1': [Function: parserOnHeaders],
                  '2': [Function: parserOnHeadersComplete],
                  '3': [Function: parserOnBody],
                  '4': [Function: parserOnMessageComplete],
                  '5': null,
                  '6': null,
                  _headers: [],
                  _url: '',
                  socket: [Circular *3],
                  incoming: null,
                  outgoing: [Circular *6],
                  maxHeaderPairs: 2000,
                  _consumed: false,
                  onIncoming: [Function: parserOnIncomingClient],
                  [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                    type: 'HTTPINCOMINGMESSAGE',
                    req: [Circular *6]
                  }
                },
                maxHeadersCount: null,
                reusedSocket: false,
                host: 'localhost',
                protocol: 'http:',
                _redirectable: Writable {
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: true,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: true,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  _events: [Object: null prototype] {
                    response: [Function: handleResponse],
                    error: [Function: handleRequestError],
                    socket: [Function: handleRequestSocket]
                  },
                  _eventsCount: 3,
                  _maxListeners: undefined,
                  _options: {
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'http:',
                    path: '/rooms',
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.4.0',
                      'Content-Length': '789',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    lookup: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'localhost',
                    port: '4000',
                    agent: undefined,
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] { path: null },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: {
                            map: {
                              'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 3a a5 07 79 db 6d 80 6d 6d bd af bd b3 cc c1 37 b0 5a f5 9f 02 de 12 de 25 ca 4c 06 26 ec 9e 3b 04 ... 1708 more bytes>
                            },
                            list: [ 'screeps.com:443:::::::::::::::::::::' ]
                          },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/rooms'
                  },
                  _ended: true,
                  _ending: true,
                  _redirectCount: 0,
                  _redirects: [],
                  _requestBodyLength: 789,
                  _requestBodyBuffers: [
                    {
                      data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                      encoding: undefined
                    }
                  ],
                  _onNativeResponse: [Function (anonymous)],
                  _currentRequest: [Circular *6],
                  _currentUrl: 'http://localhost:4000/rooms',
                  [Symbol(kCapture)]: false
                },
                [Symbol(kCapture)]: false,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(kEndCalled)]: true,
                [Symbol(kNeedDrain)]: false,
                [Symbol(corked)]: 0,
                [Symbol(kOutHeaders)]: [Object: null prototype] {
                  accept: [ 'Accept', 'application/json, text/plain, */*' ],
                  'content-type': [ 'Content-Type', 'application/json' ],
                  'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                  'content-length': [ 'Content-Length', '789' ],
                  'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                  host: [ 'Host', 'localhost:4000' ]
                },
                [Symbol(kUniqueHeaders)]: null
              },
              [Symbol(async_id_symbol)]: 173874,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *3]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 2,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/data',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 173566,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Content-Type',
          'application/json; charset=utf-8',
          'Content-Length',
          '20',
          'ETag',
          'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          'Date',
          'Mon, 05 Jun 2023 09:54:46 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Internal Server Error',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 173566,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://localhost:4000/data',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'content-type': 'application/json; charset=utf-8',
          'content-length': '20',
          etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          date: 'Mon, 05 Jun 2023 09:54:46 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 12,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/data',
          method: 'GET',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.4.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          lookup: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'localhost',
          port: '4000',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 3a a5 07 79 db 6d 80 6d 6d bd af bd b3 cc c1 37 b0 5a f5 9f 02 de 12 de 25 ca 4c 06 26 ec 9e 3b 04 ... 1708 more bytes>
                  },
                  list: [ 'screeps.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/data'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://localhost:4000/data',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kEndCalled)]: true,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:4000' ]
      },
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 500,
      statusText: 'Internal Server Error',
      headers: AxiosHeaders {
        'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '20',
        etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
        date: 'Mon, 05 Jun 2023 09:54:46 GMT',
        connection: 'close'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: null
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.4.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'get',
        url: 'http://localhost:4000/data',
        data: undefined
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 173566,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _header: 'GET /data HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'User-Agent: axios/1.4.0\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:4000\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *4> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:4000:': [
              <ref *2> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(async_id_symbol)]: 173566,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(RequestTimeout)]: undefined
              },
              <ref *3> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [
                    [Function: onReadableStreamEnd],
                    [Function: socketOnEnd]
                  ],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  data: [Function: socketOnData],
                  drain: [Function: ondrain]
                },
                _eventsCount: 8,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: false,
                  needDrain: false,
                  ending: false,
                  ended: false,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: <ref *5> HTTPParser {
                  '0': null,
                  '1': [Function: parserOnHeaders],
                  '2': [Function: parserOnHeadersComplete],
                  '3': [Function: parserOnBody],
                  '4': [Function: parserOnMessageComplete],
                  '5': null,
                  '6': null,
                  _headers: [],
                  _url: '',
                  socket: [Circular *3],
                  incoming: null,
                  outgoing: <ref *6> ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '789',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *3],
                    _header: 'PUT /rooms HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.4.0\r\n' +
                      'Content-Length: 789\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:4000\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *4],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    path: '/rooms',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: [Circular *5],
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'localhost',
                    protocol: 'http:',
                    _redirectable: Writable {
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: false,
                        decodeStrings: true,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: true,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: true,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      _events: [Object: null prototype] {
                        response: [Function: handleResponse],
                        error: [Function: handleRequestError],
                        socket: [Function: handleRequestSocket]
                      },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      _options: {
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'http:',
                        path: '/rooms',
                        method: 'PUT',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.4.0',
                          'Content-Length': '789',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        lookup: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'localhost',
                        port: '4000',
                        agent: undefined,
                        nativeProtocols: {
                          'http:': {
                            _connectionListener: [Function: connectionListener],
                            METHODS: [
                              'ACL',         'BIND',       'CHECKOUT',
                              'CONNECT',     'COPY',       'DELETE',
                              'GET',         'HEAD',       'LINK',
                              'LOCK',        'M-SEARCH',   'MERGE',
                              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                              'MOVE',        'NOTIFY',     'OPTIONS',
                              'PATCH',       'POST',       'PROPFIND',
                              'PROPPATCH',   'PURGE',      'PUT',
                              'REBIND',      'REPORT',     'SEARCH',
                              'SOURCE',      'SUBSCRIBE',  'TRACE',
                              'UNBIND',      'UNLINK',     'UNLOCK',
                              'UNSUBSCRIBE'
                            ],
                            STATUS_CODES: {
                              '100': 'Continue',
                              '101': 'Switching Protocols',
                              '102': 'Processing',
                              '103': 'Early Hints',
                              '200': 'OK',
                              '201': 'Created',
                              '202': 'Accepted',
                              '203': 'Non-Authoritative Information',
                              '204': 'No Content',
                              '205': 'Reset Content',
                              '206': 'Partial Content',
                              '207': 'Multi-Status',
                              '208': 'Already Reported',
                              '226': 'IM Used',
                              '300': 'Multiple Choices',
                              '301': 'Moved Permanently',
                              '302': 'Found',
                              '303': 'See Other',
                              '304': 'Not Modified',
                              '305': 'Use Proxy',
                              '307': 'Temporary Redirect',
                              '308': 'Permanent Redirect',
                              '400': 'Bad Request',
                              '401': 'Unauthorized',
                              '402': 'Payment Required',
                              '403': 'Forbidden',
                              '404': 'Not Found',
                              '405': 'Method Not Allowed',
                              '406': 'Not Acceptable',
                              '407': 'Proxy Authentication Required',
                              '408': 'Request Timeout',
                              '409': 'Conflict',
                              '410': 'Gone',
                              '411': 'Length Required',
                              '412': 'Precondition Failed',
                              '413': 'Payload Too Large',
                              '414': 'URI Too Long',
                              '415': 'Unsupported Media Type',
                              '416': 'Range Not Satisfiable',
                              '417': 'Expectation Failed',
                              '418': "I'm a Teapot",
                              '421': 'Misdirected Request',
                              '422': 'Unprocessable Entity',
                              '423': 'Locked',
                              '424': 'Failed Dependency',
                              '425': 'Too Early',
                              '426': 'Upgrade Required',
                              '428': 'Precondition Required',
                              '429': 'Too Many Requests',
                              '431': 'Request Header Fields Too Large',
                              '451': 'Unavailable For Legal Reasons',
                              '500': 'Internal Server Error',
                              '501': 'Not Implemented',
                              '502': 'Bad Gateway',
                              '503': 'Service Unavailable',
                              '504': 'Gateway Timeout',
                              '505': 'HTTP Version Not Supported',
                              '506': 'Variant Also Negotiates',
                              '507': 'Insufficient Storage',
                              '508': 'Loop Detected',
                              '509': 'Bandwidth Limit Exceeded',
                              '510': 'Not Extended',
                              '511': 'Network Authentication Required'
                            },
                            Agent: [Function: Agent] {
                              defaultMaxSockets: Infinity
                            },
                            ClientRequest: [Function: ClientRequest],
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            validateHeaderName: [Function: __node_internal_],
                            validateHeaderValue: [Function: __node_internal_],
                            get: [Function: get],
                            request: [Function: request],
                            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                            maxHeaderSize: [Getter],
                            globalAgent: [Getter/Setter]
                          },
                          'https:': {
                            Agent: [Function: Agent],
                            globalAgent: Agent {
                              _events: [Object: null prototype] {
                                free: [Function (anonymous)],
                                newListener: [Function: maybeEnableKeylog]
                              },
                              _eventsCount: 2,
                              _maxListeners: undefined,
                              defaultPort: 443,
                              protocol: 'https:',
                              options: [Object: null prototype] { path: null },
                              requests: [Object: null prototype] {},
                              sockets: [Object: null prototype] {},
                              freeSockets: [Object: null prototype] {},
                              keepAliveMsecs: 1000,
                              keepAlive: false,
                              maxSockets: Infinity,
                              maxFreeSockets: 256,
                              scheduling: 'lifo',
                              maxTotalSockets: Infinity,
                              totalSocketCount: 0,
                              maxCachedSessions: 100,
                              _sessionCache: {
                                map: {
                                  'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 3a a5 07 79 db 6d 80 6d 6d bd af bd b3 cc c1 37 b0 5a f5 9f 02 de 12 de 25 ca 4c 06 26 ec 9e 3b 04 ... 1708 more bytes>
                                },
                                list: [
                                  'screeps.com:443:::::::::::::::::::::'
                                ]
                              },
                              [Symbol(kCapture)]: false
                            },
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request]
                          }
                        },
                        pathname: '/rooms'
                      },
                      _ended: true,
                      _ending: true,
                      _redirectCount: 0,
                      _redirects: [],
                      _requestBodyLength: 789,
                      _requestBodyBuffers: [
                        {
                          data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                          encoding: undefined
                        }
                      ],
                      _onNativeResponse: [Function (anonymous)],
                      _currentRequest: [Circular *6],
                      _currentUrl: 'http://localhost:4000/rooms',
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kEndCalled)]: true,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                      'content-length': [ 'Content-Length', '789' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'localhost:4000' ]
                    },
                    [Symbol(kUniqueHeaders)]: null
                  },
                  maxHeaderPairs: 2000,
                  _consumed: false,
                  onIncoming: [Function: parserOnIncomingClient],
                  [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                    type: 'HTTPINCOMINGMESSAGE',
                    req: <ref *6> ClientRequest {
                      _events: [Object: null prototype] {
                        response: [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        abort: [Function (anonymous)],
                        aborted: [Function (anonymous)],
                        connect: [Function (anonymous)],
                        error: [Function (anonymous)],
                        socket: [Function (anonymous)],
                        timeout: [Function (anonymous)]
                      },
                      _eventsCount: 7,
                      _maxListeners: undefined,
                      outputData: [],
                      outputSize: 0,
                      writable: true,
                      destroyed: false,
                      _last: true,
                      chunkedEncoding: false,
                      shouldKeepAlive: false,
                      maxRequestsOnConnectionReached: false,
                      _defaultKeepAlive: true,
                      useChunkedEncodingByDefault: true,
                      sendDate: false,
                      _removedConnection: false,
                      _removedContLen: false,
                      _removedTE: false,
                      strictContentLength: false,
                      _contentLength: '789',
                      _hasBody: true,
                      _trailer: '',
                      finished: true,
                      _headerSent: true,
                      _closed: false,
                      socket: [Circular *3],
                      _header: 'PUT /rooms HTTP/1.1\r\n' +
                        'Accept: application/json, text/plain, */*\r\n' +
                        'Content-Type: application/json\r\n' +
                        'User-Agent: axios/1.4.0\r\n' +
                        'Content-Length: 789\r\n' +
                        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                        'Host: localhost:4000\r\n' +
                        'Connection: close\r\n' +
                        '\r\n',
                      _keepAliveTimeout: 0,
                      _onPendingData: [Function: nop],
                      agent: [Circular *4],
                      socketPath: undefined,
                      method: 'PUT',
                      maxHeaderSize: undefined,
                      insecureHTTPParser: undefined,
                      path: '/rooms',
                      _ended: false,
                      res: null,
                      aborted: false,
                      timeoutCb: null,
                      upgradeOrConnect: false,
                      parser: [Circular *5],
                      maxHeadersCount: null,
                      reusedSocket: false,
                      host: 'localhost',
                      protocol: 'http:',
                      _redirectable: Writable {
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: true,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        _events: [Object: null prototype] {
                          response: [Function: handleResponse],
                          error: [Function: handleRequestError],
                          socket: [Function: handleRequestSocket]
                        },
                        _eventsCount: 3,
                        _maxListeners: undefined,
                        _options: {
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'http:',
                          path: '/rooms',
                          method: 'PUT',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            'User-Agent': 'axios/1.4.0',
                            'Content-Length': '789',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          lookup: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'localhost',
                          port: '4000',
                          agent: undefined,
                          nativeProtocols: {
                            'http:': {
                              _connectionListener: [Function: connectionListener],
                              METHODS: [
                                'ACL',         'BIND',       'CHECKOUT',
                                'CONNECT',     'COPY',       'DELETE',
                                'GET',         'HEAD',       'LINK',
                                'LOCK',        'M-SEARCH',   'MERGE',
                                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                                'MOVE',        'NOTIFY',     'OPTIONS',
                                'PATCH',       'POST',       'PROPFIND',
                                'PROPPATCH',   'PURGE',      'PUT',
                                'REBIND',      'REPORT',     'SEARCH',
                                'SOURCE',      'SUBSCRIBE',  'TRACE',
                                'UNBIND',      'UNLINK',     'UNLOCK',
                                'UNSUBSCRIBE'
                              ],
                              STATUS_CODES: {
                                '100': 'Continue',
                                '101': 'Switching Protocols',
                                '102': 'Processing',
                                '103': 'Early Hints',
                                '200': 'OK',
                                '201': 'Created',
                                '202': 'Accepted',
                                '203': 'Non-Authoritative Information',
                                '204': 'No Content',
                                '205': 'Reset Content',
                                '206': 'Partial Content',
                                '207': 'Multi-Status',
                                '208': 'Already Reported',
                                '226': 'IM Used',
                                '300': 'Multiple Choices',
                                '301': 'Moved Permanently',
                                '302': 'Found',
                                '303': 'See Other',
                                '304': 'Not Modified',
                                '305': 'Use Proxy',
                                '307': 'Temporary Redirect',
                                '308': 'Permanent Redirect',
                                '400': 'Bad Request',
                                '401': 'Unauthorized',
                                '402': 'Payment Required',
                                '403': 'Forbidden',
                                '404': 'Not Found',
                                '405': 'Method Not Allowed',
                                '406': 'Not Acceptable',
                                '407': 'Proxy Authentication Required',
                                '408': 'Request Timeout',
                                '409': 'Conflict',
                                '410': 'Gone',
                                '411': 'Length Required',
                                '412': 'Precondition Failed',
                                '413': 'Payload Too Large',
                                '414': 'URI Too Long',
                                '415': 'Unsupported Media Type',
                                '416': 'Range Not Satisfiable',
                                '417': 'Expectation Failed',
                                '418': "I'm a Teapot",
                                '421': 'Misdirected Request',
                                '422': 'Unprocessable Entity',
                                '423': 'Locked',
                                '424': 'Failed Dependency',
                                '425': 'Too Early',
                                '426': 'Upgrade Required',
                                '428': 'Precondition Required',
                                '429': 'Too Many Requests',
                                '431': 'Request Header Fields Too Large',
                                '451': 'Unavailable For Legal Reasons',
                                '500': 'Internal Server Error',
                                '501': 'Not Implemented',
                                '502': 'Bad Gateway',
                                '503': 'Service Unavailable',
                                '504': 'Gateway Timeout',
                                '505': 'HTTP Version Not Supported',
                                '506': 'Variant Also Negotiates',
                                '507': 'Insufficient Storage',
                                '508': 'Loop Detected',
                                '509': 'Bandwidth Limit Exceeded',
                                '510': 'Not Extended',
                                '511': 'Network Authentication Required'
                              },
                              Agent: [Function: Agent] {
                                defaultMaxSockets: Infinity
                              },
                              ClientRequest: [Function: ClientRequest],
                              IncomingMessage: [Function: IncomingMessage],
                              OutgoingMessage: [Function: OutgoingMessage],
                              Server: [Function: Server],
                              ServerResponse: [Function: ServerResponse],
                              createServer: [Function: createServer],
                              validateHeaderName: [Function: __node_internal_],
                              validateHeaderValue: [Function: __node_internal_],
                              get: [Function: get],
                              request: [Function: request],
                              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                              maxHeaderSize: [Getter],
                              globalAgent: [Getter/Setter]
                            },
                            'https:': {
                              Agent: [Function: Agent],
                              globalAgent: Agent {
                                _events: [Object: null prototype] {
                                  free: [Function (anonymous)],
                                  newListener: [Function: maybeEnableKeylog]
                                },
                                _eventsCount: 2,
                                _maxListeners: undefined,
                                defaultPort: 443,
                                protocol: 'https:',
                                options: [Object: null prototype] { path: null },
                                requests: [Object: null prototype] {},
                                sockets: [Object: null prototype] {},
                                freeSockets: [Object: null prototype] {},
                                keepAliveMsecs: 1000,
                                keepAlive: false,
                                maxSockets: Infinity,
                                maxFreeSockets: 256,
                                scheduling: 'lifo',
                                maxTotalSockets: Infinity,
                                totalSocketCount: 0,
                                maxCachedSessions: 100,
                                _sessionCache: {
                                  map: {
                                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 3a a5 07 79 db 6d 80 6d 6d bd af bd b3 cc c1 37 b0 5a f5 9f 02 de 12 de 25 ca 4c 06 26 ec 9e 3b 04 ... 1708 more bytes>
                                  },
                                  list: [
                                    'screeps.com:443:::::::::::::::::::::'
                                  ]
                                },
                                [Symbol(kCapture)]: false
                              },
                              Server: [Function: Server],
                              createServer: [Function: createServer],
                              get: [Function: get],
                              request: [Function: request]
                            }
                          },
                          pathname: '/rooms'
                        },
                        _ended: true,
                        _ending: true,
                        _redirectCount: 0,
                        _redirects: [],
                        _requestBodyLength: 789,
                        _requestBodyBuffers: [
                          {
                            data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                            encoding: undefined
                          }
                        ],
                        _onNativeResponse: [Function (anonymous)],
                        _currentRequest: [Circular *6],
                        _currentUrl: 'http://localhost:4000/rooms',
                        [Symbol(kCapture)]: false
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(kEndCalled)]: true,
                      [Symbol(kNeedDrain)]: false,
                      [Symbol(corked)]: 0,
                      [Symbol(kOutHeaders)]: [Object: null prototype] {
                        accept: [ 'Accept', 'application/json, text/plain, */*' ],
                        'content-type': [ 'Content-Type', 'application/json' ],
                        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                        'content-length': [ 'Content-Length', '789' ],
                        'accept-encoding': [
                          'Accept-Encoding',
                          'gzip, compress, deflate, br'
                        ],
                        host: [ 'Host', 'localhost:4000' ]
                      },
                      [Symbol(kUniqueHeaders)]: null
                    }
                  }
                },
                _httpMessage: <ref *6> ClientRequest {
                  _events: [Object: null prototype] {
                    response: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    abort: [Function (anonymous)],
                    aborted: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    error: [Function (anonymous)],
                    socket: [Function (anonymous)],
                    timeout: [Function (anonymous)]
                  },
                  _eventsCount: 7,
                  _maxListeners: undefined,
                  outputData: [],
                  outputSize: 0,
                  writable: true,
                  destroyed: false,
                  _last: true,
                  chunkedEncoding: false,
                  shouldKeepAlive: false,
                  maxRequestsOnConnectionReached: false,
                  _defaultKeepAlive: true,
                  useChunkedEncodingByDefault: true,
                  sendDate: false,
                  _removedConnection: false,
                  _removedContLen: false,
                  _removedTE: false,
                  strictContentLength: false,
                  _contentLength: '789',
                  _hasBody: true,
                  _trailer: '',
                  finished: true,
                  _headerSent: true,
                  _closed: false,
                  socket: [Circular *3],
                  _header: 'PUT /rooms HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'User-Agent: axios/1.4.0\r\n' +
                    'Content-Length: 789\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:4000\r\n' +
                    'Connection: close\r\n' +
                    '\r\n',
                  _keepAliveTimeout: 0,
                  _onPendingData: [Function: nop],
                  agent: [Circular *4],
                  socketPath: undefined,
                  method: 'PUT',
                  maxHeaderSize: undefined,
                  insecureHTTPParser: undefined,
                  path: '/rooms',
                  _ended: false,
                  res: null,
                  aborted: false,
                  timeoutCb: null,
                  upgradeOrConnect: false,
                  parser: <ref *5> HTTPParser {
                    '0': null,
                    '1': [Function: parserOnHeaders],
                    '2': [Function: parserOnHeadersComplete],
                    '3': [Function: parserOnBody],
                    '4': [Function: parserOnMessageComplete],
                    '5': null,
                    '6': null,
                    _headers: [],
                    _url: '',
                    socket: [Circular *3],
                    incoming: null,
                    outgoing: [Circular *6],
                    maxHeaderPairs: 2000,
                    _consumed: false,
                    onIncoming: [Function: parserOnIncomingClient],
                    [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                      type: 'HTTPINCOMINGMESSAGE',
                      req: [Circular *6]
                    }
                  },
                  maxHeadersCount: null,
                  reusedSocket: false,
                  host: 'localhost',
                  protocol: 'http:',
                  _redirectable: Writable {
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: true,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: true,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    _events: [Object: null prototype] {
                      response: [Function: handleResponse],
                      error: [Function: handleRequestError],
                      socket: [Function: handleRequestSocket]
                    },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    _options: {
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'http:',
                      path: '/rooms',
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.4.0',
                        'Content-Length': '789',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      lookup: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'localhost',
                      port: '4000',
                      agent: undefined,
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] { path: null },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: {
                              map: {
                                'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 3a a5 07 79 db 6d 80 6d 6d bd af bd b3 cc c1 37 b0 5a f5 9f 02 de 12 de 25 ca 4c 06 26 ec 9e 3b 04 ... 1708 more bytes>
                              },
                              list: [ 'screeps.com:443:::::::::::::::::::::' ]
                            },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/rooms'
                    },
                    _ended: true,
                    _ending: true,
                    _redirectCount: 0,
                    _redirects: [],
                    _requestBodyLength: 789,
                    _requestBodyBuffers: [
                      {
                        data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                        encoding: undefined
                      }
                    ],
                    _onNativeResponse: [Function (anonymous)],
                    _currentRequest: [Circular *6],
                    _currentUrl: 'http://localhost:4000/rooms',
                    [Symbol(kCapture)]: false
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(kEndCalled)]: true,
                  [Symbol(kNeedDrain)]: false,
                  [Symbol(corked)]: 0,
                  [Symbol(kOutHeaders)]: [Object: null prototype] {
                    accept: [ 'Accept', 'application/json, text/plain, */*' ],
                    'content-type': [ 'Content-Type', 'application/json' ],
                    'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                    'content-length': [ 'Content-Length', '789' ],
                    'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                    host: [ 'Host', 'localhost:4000' ]
                  },
                  [Symbol(kUniqueHeaders)]: null
                },
                [Symbol(async_id_symbol)]: 173874,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *3]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 2,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'GET',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        path: '/data',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 173566,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'X-Powered-By',
            'Express',
            'Content-Type',
            'application/json; charset=utf-8',
            'Content-Length',
            '20',
            'ETag',
            'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            'Date',
            'Mon, 05 Jun 2023 09:54:46 GMT',
            'Connection',
            'close'
          ],
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 500,
          statusMessage: 'Internal Server Error',
          client: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 173566,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'http://localhost:4000/data',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            'x-powered-by': 'Express',
            'content-type': 'application/json; charset=utf-8',
            'content-length': '20',
            etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            date: 'Mon, 05 Jun 2023 09:54:46 GMT',
            connection: 'close'
          },
          [Symbol(kHeadersCount)]: 12,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'http:',
            path: '/data',
            method: 'GET',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'localhost',
            port: '4000',
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 3a a5 07 79 db 6d 80 6d 6d bd af bd b3 cc c1 37 b0 5a f5 9f 02 de 12 de 25 ca 4c 06 26 ec 9e 3b 04 ... 1708 more bytes>
                    },
                    list: [ 'screeps.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/data'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 0,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'http://localhost:4000/data',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:4000' ]
        },
        [Symbol(kUniqueHeaders)]: null
      },
      data: 'Failed to get data'
    },
    level: '\x1B[31merror\x1B[39m',
    stack: 'AxiosError: Request failed with status code 500\n' +
      '    at settle (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/adapters/http.js:570:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at endReadableNT (node:internal/streams/readable:1358:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:83:21)',
    timestamp: '2023-06-05T09:54:46.290Z'
  }
  {
    message: 'Request failed with status code 500',
    name: 'AxiosError',
    code: 'ERR_BAD_RESPONSE',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: null
      },
      validateStatus: [Function: validateStatus],
      headers: AxiosHeaders {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/1.4.0',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'get',
      url: 'http://localhost:4000/data',
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(async_id_symbol)]: 182778,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /data HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.4.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:4000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:4000:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(async_id_symbol)]: 182778,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/data',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 182778,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Content-Type',
          'application/json; charset=utf-8',
          'Content-Length',
          '20',
          'ETag',
          'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          'Date',
          'Mon, 05 Jun 2023 10:11:41 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Internal Server Error',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 182778,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://localhost:4000/data',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'content-type': 'application/json; charset=utf-8',
          'content-length': '20',
          etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          date: 'Mon, 05 Jun 2023 10:11:41 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 12,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/data',
          method: 'GET',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.4.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          lookup: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'localhost',
          port: '4000',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 37 28 f9 a5 a3 b4 cc 79 be ee 08 2a 01 fa 6c e9 ba 92 6c fb 7a 93 a5 5a b9 8d 0a eb ab 34 71 d7 04 ... 1708 more bytes>
                  },
                  list: [ 'screeps.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/data'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://localhost:4000/data',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kEndCalled)]: true,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:4000' ]
      },
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 500,
      statusText: 'Internal Server Error',
      headers: AxiosHeaders {
        'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '20',
        etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
        date: 'Mon, 05 Jun 2023 10:11:41 GMT',
        connection: 'close'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: null
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.4.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'get',
        url: 'http://localhost:4000/data',
        data: undefined
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 182778,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _header: 'GET /data HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'User-Agent: axios/1.4.0\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:4000\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:4000:': [
              <ref *2> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(async_id_symbol)]: 182778,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(RequestTimeout)]: undefined
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'GET',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        path: '/data',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 182778,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'X-Powered-By',
            'Express',
            'Content-Type',
            'application/json; charset=utf-8',
            'Content-Length',
            '20',
            'ETag',
            'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            'Date',
            'Mon, 05 Jun 2023 10:11:41 GMT',
            'Connection',
            'close'
          ],
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 500,
          statusMessage: 'Internal Server Error',
          client: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 182778,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'http://localhost:4000/data',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            'x-powered-by': 'Express',
            'content-type': 'application/json; charset=utf-8',
            'content-length': '20',
            etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            date: 'Mon, 05 Jun 2023 10:11:41 GMT',
            connection: 'close'
          },
          [Symbol(kHeadersCount)]: 12,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'http:',
            path: '/data',
            method: 'GET',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'localhost',
            port: '4000',
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 37 28 f9 a5 a3 b4 cc 79 be ee 08 2a 01 fa 6c e9 ba 92 6c fb 7a 93 a5 5a b9 8d 0a eb ab 34 71 d7 04 ... 1708 more bytes>
                    },
                    list: [ 'screeps.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/data'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 0,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'http://localhost:4000/data',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:4000' ]
        },
        [Symbol(kUniqueHeaders)]: null
      },
      data: 'Failed to get data'
    },
    level: '\x1B[31merror\x1B[39m',
    stack: 'AxiosError: Request failed with status code 500\n' +
      '    at settle (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/adapters/http.js:570:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at endReadableNT (node:internal/streams/readable:1358:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:83:21)',
    timestamp: '2023-06-05T10:11:41.660Z'
  }
  {
    message: 'Request failed with status code 500',
    name: 'AxiosError',
    code: 'ERR_BAD_RESPONSE',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: null
      },
      validateStatus: [Function: validateStatus],
      headers: AxiosHeaders {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/1.4.0',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'get',
      url: 'http://localhost:4000/data',
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(async_id_symbol)]: 226583,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /data HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.4.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:4000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *4> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:4000:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(async_id_symbol)]: 226583,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(RequestTimeout)]: undefined
            },
            <ref *3> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [
                  [Function: onReadableStreamEnd],
                  [Function: socketOnEnd]
                ],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                data: [Function: socketOnData],
                drain: [Function: ondrain]
              },
              _eventsCount: 8,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: <ref *5> HTTPParser {
                '0': null,
                '1': [Function: parserOnHeaders],
                '2': [Function: parserOnHeadersComplete],
                '3': [Function: parserOnBody],
                '4': [Function: parserOnMessageComplete],
                '5': null,
                '6': null,
                _headers: [],
                _url: '',
                socket: [Circular *3],
                incoming: null,
                outgoing: <ref *6> ClientRequest {
                  _events: [Object: null prototype] {
                    response: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    abort: [Function (anonymous)],
                    aborted: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    error: [Function (anonymous)],
                    socket: [Function (anonymous)],
                    timeout: [Function (anonymous)]
                  },
                  _eventsCount: 7,
                  _maxListeners: undefined,
                  outputData: [],
                  outputSize: 0,
                  writable: true,
                  destroyed: false,
                  _last: true,
                  chunkedEncoding: false,
                  shouldKeepAlive: false,
                  maxRequestsOnConnectionReached: false,
                  _defaultKeepAlive: true,
                  useChunkedEncodingByDefault: true,
                  sendDate: false,
                  _removedConnection: false,
                  _removedContLen: false,
                  _removedTE: false,
                  strictContentLength: false,
                  _contentLength: '789',
                  _hasBody: true,
                  _trailer: '',
                  finished: true,
                  _headerSent: true,
                  _closed: false,
                  socket: [Circular *3],
                  _header: 'PUT /rooms HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'User-Agent: axios/1.4.0\r\n' +
                    'Content-Length: 789\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:4000\r\n' +
                    'Connection: close\r\n' +
                    '\r\n',
                  _keepAliveTimeout: 0,
                  _onPendingData: [Function: nop],
                  agent: [Circular *4],
                  socketPath: undefined,
                  method: 'PUT',
                  maxHeaderSize: undefined,
                  insecureHTTPParser: undefined,
                  path: '/rooms',
                  _ended: false,
                  res: null,
                  aborted: false,
                  timeoutCb: null,
                  upgradeOrConnect: false,
                  parser: [Circular *5],
                  maxHeadersCount: null,
                  reusedSocket: false,
                  host: 'localhost',
                  protocol: 'http:',
                  _redirectable: Writable {
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: true,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: true,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    _events: [Object: null prototype] {
                      response: [Function: handleResponse],
                      error: [Function: handleRequestError],
                      socket: [Function: handleRequestSocket]
                    },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    _options: {
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'http:',
                      path: '/rooms',
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.4.0',
                        'Content-Length': '789',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      lookup: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'localhost',
                      port: '4000',
                      agent: undefined,
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] { path: null },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: {
                              map: {
                                'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 94 80 2a 35 cd 6f 45 45 d1 23 25 6a 98 f7 fc 13 18 d3 84 28 ba 8d 5c 37 11 2d 96 69 bf ac fd bf 04 ... 1708 more bytes>
                              },
                              list: [ 'screeps.com:443:::::::::::::::::::::' ]
                            },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/rooms'
                    },
                    _ended: true,
                    _ending: true,
                    _redirectCount: 0,
                    _redirects: [],
                    _requestBodyLength: 789,
                    _requestBodyBuffers: [
                      {
                        data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                        encoding: undefined
                      }
                    ],
                    _onNativeResponse: [Function (anonymous)],
                    _currentRequest: [Circular *6],
                    _currentUrl: 'http://localhost:4000/rooms',
                    [Symbol(kCapture)]: false
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(kEndCalled)]: true,
                  [Symbol(kNeedDrain)]: false,
                  [Symbol(corked)]: 0,
                  [Symbol(kOutHeaders)]: [Object: null prototype] {
                    accept: [ 'Accept', 'application/json, text/plain, */*' ],
                    'content-type': [ 'Content-Type', 'application/json' ],
                    'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                    'content-length': [ 'Content-Length', '789' ],
                    'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                    host: [ 'Host', 'localhost:4000' ]
                  },
                  [Symbol(kUniqueHeaders)]: null
                },
                maxHeaderPairs: 2000,
                _consumed: false,
                onIncoming: [Function: parserOnIncomingClient],
                [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                  type: 'HTTPINCOMINGMESSAGE',
                  req: <ref *6> ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '789',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *3],
                    _header: 'PUT /rooms HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.4.0\r\n' +
                      'Content-Length: 789\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:4000\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *4],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    path: '/rooms',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: [Circular *5],
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'localhost',
                    protocol: 'http:',
                    _redirectable: Writable {
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: false,
                        decodeStrings: true,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: true,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: true,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      _events: [Object: null prototype] {
                        response: [Function: handleResponse],
                        error: [Function: handleRequestError],
                        socket: [Function: handleRequestSocket]
                      },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      _options: {
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'http:',
                        path: '/rooms',
                        method: 'PUT',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.4.0',
                          'Content-Length': '789',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        lookup: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'localhost',
                        port: '4000',
                        agent: undefined,
                        nativeProtocols: {
                          'http:': {
                            _connectionListener: [Function: connectionListener],
                            METHODS: [
                              'ACL',         'BIND',       'CHECKOUT',
                              'CONNECT',     'COPY',       'DELETE',
                              'GET',         'HEAD',       'LINK',
                              'LOCK',        'M-SEARCH',   'MERGE',
                              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                              'MOVE',        'NOTIFY',     'OPTIONS',
                              'PATCH',       'POST',       'PROPFIND',
                              'PROPPATCH',   'PURGE',      'PUT',
                              'REBIND',      'REPORT',     'SEARCH',
                              'SOURCE',      'SUBSCRIBE',  'TRACE',
                              'UNBIND',      'UNLINK',     'UNLOCK',
                              'UNSUBSCRIBE'
                            ],
                            STATUS_CODES: {
                              '100': 'Continue',
                              '101': 'Switching Protocols',
                              '102': 'Processing',
                              '103': 'Early Hints',
                              '200': 'OK',
                              '201': 'Created',
                              '202': 'Accepted',
                              '203': 'Non-Authoritative Information',
                              '204': 'No Content',
                              '205': 'Reset Content',
                              '206': 'Partial Content',
                              '207': 'Multi-Status',
                              '208': 'Already Reported',
                              '226': 'IM Used',
                              '300': 'Multiple Choices',
                              '301': 'Moved Permanently',
                              '302': 'Found',
                              '303': 'See Other',
                              '304': 'Not Modified',
                              '305': 'Use Proxy',
                              '307': 'Temporary Redirect',
                              '308': 'Permanent Redirect',
                              '400': 'Bad Request',
                              '401': 'Unauthorized',
                              '402': 'Payment Required',
                              '403': 'Forbidden',
                              '404': 'Not Found',
                              '405': 'Method Not Allowed',
                              '406': 'Not Acceptable',
                              '407': 'Proxy Authentication Required',
                              '408': 'Request Timeout',
                              '409': 'Conflict',
                              '410': 'Gone',
                              '411': 'Length Required',
                              '412': 'Precondition Failed',
                              '413': 'Payload Too Large',
                              '414': 'URI Too Long',
                              '415': 'Unsupported Media Type',
                              '416': 'Range Not Satisfiable',
                              '417': 'Expectation Failed',
                              '418': "I'm a Teapot",
                              '421': 'Misdirected Request',
                              '422': 'Unprocessable Entity',
                              '423': 'Locked',
                              '424': 'Failed Dependency',
                              '425': 'Too Early',
                              '426': 'Upgrade Required',
                              '428': 'Precondition Required',
                              '429': 'Too Many Requests',
                              '431': 'Request Header Fields Too Large',
                              '451': 'Unavailable For Legal Reasons',
                              '500': 'Internal Server Error',
                              '501': 'Not Implemented',
                              '502': 'Bad Gateway',
                              '503': 'Service Unavailable',
                              '504': 'Gateway Timeout',
                              '505': 'HTTP Version Not Supported',
                              '506': 'Variant Also Negotiates',
                              '507': 'Insufficient Storage',
                              '508': 'Loop Detected',
                              '509': 'Bandwidth Limit Exceeded',
                              '510': 'Not Extended',
                              '511': 'Network Authentication Required'
                            },
                            Agent: [Function: Agent] {
                              defaultMaxSockets: Infinity
                            },
                            ClientRequest: [Function: ClientRequest],
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            validateHeaderName: [Function: __node_internal_],
                            validateHeaderValue: [Function: __node_internal_],
                            get: [Function: get],
                            request: [Function: request],
                            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                            maxHeaderSize: [Getter],
                            globalAgent: [Getter/Setter]
                          },
                          'https:': {
                            Agent: [Function: Agent],
                            globalAgent: Agent {
                              _events: [Object: null prototype] {
                                free: [Function (anonymous)],
                                newListener: [Function: maybeEnableKeylog]
                              },
                              _eventsCount: 2,
                              _maxListeners: undefined,
                              defaultPort: 443,
                              protocol: 'https:',
                              options: [Object: null prototype] { path: null },
                              requests: [Object: null prototype] {},
                              sockets: [Object: null prototype] {},
                              freeSockets: [Object: null prototype] {},
                              keepAliveMsecs: 1000,
                              keepAlive: false,
                              maxSockets: Infinity,
                              maxFreeSockets: 256,
                              scheduling: 'lifo',
                              maxTotalSockets: Infinity,
                              totalSocketCount: 0,
                              maxCachedSessions: 100,
                              _sessionCache: {
                                map: {
                                  'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 94 80 2a 35 cd 6f 45 45 d1 23 25 6a 98 f7 fc 13 18 d3 84 28 ba 8d 5c 37 11 2d 96 69 bf ac fd bf 04 ... 1708 more bytes>
                                },
                                list: [
                                  'screeps.com:443:::::::::::::::::::::'
                                ]
                              },
                              [Symbol(kCapture)]: false
                            },
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request]
                          }
                        },
                        pathname: '/rooms'
                      },
                      _ended: true,
                      _ending: true,
                      _redirectCount: 0,
                      _redirects: [],
                      _requestBodyLength: 789,
                      _requestBodyBuffers: [
                        {
                          data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                          encoding: undefined
                        }
                      ],
                      _onNativeResponse: [Function (anonymous)],
                      _currentRequest: [Circular *6],
                      _currentUrl: 'http://localhost:4000/rooms',
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kEndCalled)]: true,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                      'content-length': [ 'Content-Length', '789' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'localhost:4000' ]
                    },
                    [Symbol(kUniqueHeaders)]: null
                  }
                }
              },
              _httpMessage: <ref *6> ClientRequest {
                _events: [Object: null prototype] {
                  response: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  abort: [Function (anonymous)],
                  aborted: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  error: [Function (anonymous)],
                  socket: [Function (anonymous)],
                  timeout: [Function (anonymous)]
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                outputData: [],
                outputSize: 0,
                writable: true,
                destroyed: false,
                _last: true,
                chunkedEncoding: false,
                shouldKeepAlive: false,
                maxRequestsOnConnectionReached: false,
                _defaultKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: false,
                _removedConnection: false,
                _removedContLen: false,
                _removedTE: false,
                strictContentLength: false,
                _contentLength: '789',
                _hasBody: true,
                _trailer: '',
                finished: true,
                _headerSent: true,
                _closed: false,
                socket: [Circular *3],
                _header: 'PUT /rooms HTTP/1.1\r\n' +
                  'Accept: application/json, text/plain, */*\r\n' +
                  'Content-Type: application/json\r\n' +
                  'User-Agent: axios/1.4.0\r\n' +
                  'Content-Length: 789\r\n' +
                  'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                  'Host: localhost:4000\r\n' +
                  'Connection: close\r\n' +
                  '\r\n',
                _keepAliveTimeout: 0,
                _onPendingData: [Function: nop],
                agent: [Circular *4],
                socketPath: undefined,
                method: 'PUT',
                maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                path: '/rooms',
                _ended: false,
                res: null,
                aborted: false,
                timeoutCb: null,
                upgradeOrConnect: false,
                parser: <ref *5> HTTPParser {
                  '0': null,
                  '1': [Function: parserOnHeaders],
                  '2': [Function: parserOnHeadersComplete],
                  '3': [Function: parserOnBody],
                  '4': [Function: parserOnMessageComplete],
                  '5': null,
                  '6': null,
                  _headers: [],
                  _url: '',
                  socket: [Circular *3],
                  incoming: null,
                  outgoing: [Circular *6],
                  maxHeaderPairs: 2000,
                  _consumed: false,
                  onIncoming: [Function: parserOnIncomingClient],
                  [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                    type: 'HTTPINCOMINGMESSAGE',
                    req: [Circular *6]
                  }
                },
                maxHeadersCount: null,
                reusedSocket: false,
                host: 'localhost',
                protocol: 'http:',
                _redirectable: Writable {
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: true,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: true,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  _events: [Object: null prototype] {
                    response: [Function: handleResponse],
                    error: [Function: handleRequestError],
                    socket: [Function: handleRequestSocket]
                  },
                  _eventsCount: 3,
                  _maxListeners: undefined,
                  _options: {
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'http:',
                    path: '/rooms',
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.4.0',
                      'Content-Length': '789',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    lookup: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'localhost',
                    port: '4000',
                    agent: undefined,
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] { path: null },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: {
                            map: {
                              'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 94 80 2a 35 cd 6f 45 45 d1 23 25 6a 98 f7 fc 13 18 d3 84 28 ba 8d 5c 37 11 2d 96 69 bf ac fd bf 04 ... 1708 more bytes>
                            },
                            list: [ 'screeps.com:443:::::::::::::::::::::' ]
                          },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/rooms'
                  },
                  _ended: true,
                  _ending: true,
                  _redirectCount: 0,
                  _redirects: [],
                  _requestBodyLength: 789,
                  _requestBodyBuffers: [
                    {
                      data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                      encoding: undefined
                    }
                  ],
                  _onNativeResponse: [Function (anonymous)],
                  _currentRequest: [Circular *6],
                  _currentUrl: 'http://localhost:4000/rooms',
                  [Symbol(kCapture)]: false
                },
                [Symbol(kCapture)]: false,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(kEndCalled)]: true,
                [Symbol(kNeedDrain)]: false,
                [Symbol(corked)]: 0,
                [Symbol(kOutHeaders)]: [Object: null prototype] {
                  accept: [ 'Accept', 'application/json, text/plain, */*' ],
                  'content-type': [ 'Content-Type', 'application/json' ],
                  'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                  'content-length': [ 'Content-Length', '789' ],
                  'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                  host: [ 'Host', 'localhost:4000' ]
                },
                [Symbol(kUniqueHeaders)]: null
              },
              [Symbol(async_id_symbol)]: 226899,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *3]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 2,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/data',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 226583,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Content-Type',
          'application/json; charset=utf-8',
          'Content-Length',
          '20',
          'ETag',
          'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          'Date',
          'Mon, 05 Jun 2023 11:17:49 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Internal Server Error',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 226583,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://localhost:4000/data',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'content-type': 'application/json; charset=utf-8',
          'content-length': '20',
          etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          date: 'Mon, 05 Jun 2023 11:17:49 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 12,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/data',
          method: 'GET',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.4.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          lookup: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'localhost',
          port: '4000',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 94 80 2a 35 cd 6f 45 45 d1 23 25 6a 98 f7 fc 13 18 d3 84 28 ba 8d 5c 37 11 2d 96 69 bf ac fd bf 04 ... 1708 more bytes>
                  },
                  list: [ 'screeps.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/data'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://localhost:4000/data',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kEndCalled)]: true,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:4000' ]
      },
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 500,
      statusText: 'Internal Server Error',
      headers: AxiosHeaders {
        'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '20',
        etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
        date: 'Mon, 05 Jun 2023 11:17:49 GMT',
        connection: 'close'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: null
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.4.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'get',
        url: 'http://localhost:4000/data',
        data: undefined
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 226583,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _header: 'GET /data HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'User-Agent: axios/1.4.0\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:4000\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *4> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:4000:': [
              <ref *2> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(async_id_symbol)]: 226583,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(RequestTimeout)]: undefined
              },
              <ref *3> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [
                    [Function: onReadableStreamEnd],
                    [Function: socketOnEnd]
                  ],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  data: [Function: socketOnData],
                  drain: [Function: ondrain]
                },
                _eventsCount: 8,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: false,
                  needDrain: false,
                  ending: false,
                  ended: false,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: <ref *5> HTTPParser {
                  '0': null,
                  '1': [Function: parserOnHeaders],
                  '2': [Function: parserOnHeadersComplete],
                  '3': [Function: parserOnBody],
                  '4': [Function: parserOnMessageComplete],
                  '5': null,
                  '6': null,
                  _headers: [],
                  _url: '',
                  socket: [Circular *3],
                  incoming: null,
                  outgoing: <ref *6> ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '789',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *3],
                    _header: 'PUT /rooms HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.4.0\r\n' +
                      'Content-Length: 789\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:4000\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *4],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    path: '/rooms',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: [Circular *5],
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'localhost',
                    protocol: 'http:',
                    _redirectable: Writable {
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: false,
                        decodeStrings: true,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: true,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: true,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      _events: [Object: null prototype] {
                        response: [Function: handleResponse],
                        error: [Function: handleRequestError],
                        socket: [Function: handleRequestSocket]
                      },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      _options: {
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'http:',
                        path: '/rooms',
                        method: 'PUT',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.4.0',
                          'Content-Length': '789',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        lookup: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'localhost',
                        port: '4000',
                        agent: undefined,
                        nativeProtocols: {
                          'http:': {
                            _connectionListener: [Function: connectionListener],
                            METHODS: [
                              'ACL',         'BIND',       'CHECKOUT',
                              'CONNECT',     'COPY',       'DELETE',
                              'GET',         'HEAD',       'LINK',
                              'LOCK',        'M-SEARCH',   'MERGE',
                              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                              'MOVE',        'NOTIFY',     'OPTIONS',
                              'PATCH',       'POST',       'PROPFIND',
                              'PROPPATCH',   'PURGE',      'PUT',
                              'REBIND',      'REPORT',     'SEARCH',
                              'SOURCE',      'SUBSCRIBE',  'TRACE',
                              'UNBIND',      'UNLINK',     'UNLOCK',
                              'UNSUBSCRIBE'
                            ],
                            STATUS_CODES: {
                              '100': 'Continue',
                              '101': 'Switching Protocols',
                              '102': 'Processing',
                              '103': 'Early Hints',
                              '200': 'OK',
                              '201': 'Created',
                              '202': 'Accepted',
                              '203': 'Non-Authoritative Information',
                              '204': 'No Content',
                              '205': 'Reset Content',
                              '206': 'Partial Content',
                              '207': 'Multi-Status',
                              '208': 'Already Reported',
                              '226': 'IM Used',
                              '300': 'Multiple Choices',
                              '301': 'Moved Permanently',
                              '302': 'Found',
                              '303': 'See Other',
                              '304': 'Not Modified',
                              '305': 'Use Proxy',
                              '307': 'Temporary Redirect',
                              '308': 'Permanent Redirect',
                              '400': 'Bad Request',
                              '401': 'Unauthorized',
                              '402': 'Payment Required',
                              '403': 'Forbidden',
                              '404': 'Not Found',
                              '405': 'Method Not Allowed',
                              '406': 'Not Acceptable',
                              '407': 'Proxy Authentication Required',
                              '408': 'Request Timeout',
                              '409': 'Conflict',
                              '410': 'Gone',
                              '411': 'Length Required',
                              '412': 'Precondition Failed',
                              '413': 'Payload Too Large',
                              '414': 'URI Too Long',
                              '415': 'Unsupported Media Type',
                              '416': 'Range Not Satisfiable',
                              '417': 'Expectation Failed',
                              '418': "I'm a Teapot",
                              '421': 'Misdirected Request',
                              '422': 'Unprocessable Entity',
                              '423': 'Locked',
                              '424': 'Failed Dependency',
                              '425': 'Too Early',
                              '426': 'Upgrade Required',
                              '428': 'Precondition Required',
                              '429': 'Too Many Requests',
                              '431': 'Request Header Fields Too Large',
                              '451': 'Unavailable For Legal Reasons',
                              '500': 'Internal Server Error',
                              '501': 'Not Implemented',
                              '502': 'Bad Gateway',
                              '503': 'Service Unavailable',
                              '504': 'Gateway Timeout',
                              '505': 'HTTP Version Not Supported',
                              '506': 'Variant Also Negotiates',
                              '507': 'Insufficient Storage',
                              '508': 'Loop Detected',
                              '509': 'Bandwidth Limit Exceeded',
                              '510': 'Not Extended',
                              '511': 'Network Authentication Required'
                            },
                            Agent: [Function: Agent] {
                              defaultMaxSockets: Infinity
                            },
                            ClientRequest: [Function: ClientRequest],
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            validateHeaderName: [Function: __node_internal_],
                            validateHeaderValue: [Function: __node_internal_],
                            get: [Function: get],
                            request: [Function: request],
                            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                            maxHeaderSize: [Getter],
                            globalAgent: [Getter/Setter]
                          },
                          'https:': {
                            Agent: [Function: Agent],
                            globalAgent: Agent {
                              _events: [Object: null prototype] {
                                free: [Function (anonymous)],
                                newListener: [Function: maybeEnableKeylog]
                              },
                              _eventsCount: 2,
                              _maxListeners: undefined,
                              defaultPort: 443,
                              protocol: 'https:',
                              options: [Object: null prototype] { path: null },
                              requests: [Object: null prototype] {},
                              sockets: [Object: null prototype] {},
                              freeSockets: [Object: null prototype] {},
                              keepAliveMsecs: 1000,
                              keepAlive: false,
                              maxSockets: Infinity,
                              maxFreeSockets: 256,
                              scheduling: 'lifo',
                              maxTotalSockets: Infinity,
                              totalSocketCount: 0,
                              maxCachedSessions: 100,
                              _sessionCache: {
                                map: {
                                  'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 94 80 2a 35 cd 6f 45 45 d1 23 25 6a 98 f7 fc 13 18 d3 84 28 ba 8d 5c 37 11 2d 96 69 bf ac fd bf 04 ... 1708 more bytes>
                                },
                                list: [
                                  'screeps.com:443:::::::::::::::::::::'
                                ]
                              },
                              [Symbol(kCapture)]: false
                            },
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request]
                          }
                        },
                        pathname: '/rooms'
                      },
                      _ended: true,
                      _ending: true,
                      _redirectCount: 0,
                      _redirects: [],
                      _requestBodyLength: 789,
                      _requestBodyBuffers: [
                        {
                          data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                          encoding: undefined
                        }
                      ],
                      _onNativeResponse: [Function (anonymous)],
                      _currentRequest: [Circular *6],
                      _currentUrl: 'http://localhost:4000/rooms',
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kEndCalled)]: true,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                      'content-length': [ 'Content-Length', '789' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'localhost:4000' ]
                    },
                    [Symbol(kUniqueHeaders)]: null
                  },
                  maxHeaderPairs: 2000,
                  _consumed: false,
                  onIncoming: [Function: parserOnIncomingClient],
                  [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                    type: 'HTTPINCOMINGMESSAGE',
                    req: <ref *6> ClientRequest {
                      _events: [Object: null prototype] {
                        response: [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        abort: [Function (anonymous)],
                        aborted: [Function (anonymous)],
                        connect: [Function (anonymous)],
                        error: [Function (anonymous)],
                        socket: [Function (anonymous)],
                        timeout: [Function (anonymous)]
                      },
                      _eventsCount: 7,
                      _maxListeners: undefined,
                      outputData: [],
                      outputSize: 0,
                      writable: true,
                      destroyed: false,
                      _last: true,
                      chunkedEncoding: false,
                      shouldKeepAlive: false,
                      maxRequestsOnConnectionReached: false,
                      _defaultKeepAlive: true,
                      useChunkedEncodingByDefault: true,
                      sendDate: false,
                      _removedConnection: false,
                      _removedContLen: false,
                      _removedTE: false,
                      strictContentLength: false,
                      _contentLength: '789',
                      _hasBody: true,
                      _trailer: '',
                      finished: true,
                      _headerSent: true,
                      _closed: false,
                      socket: [Circular *3],
                      _header: 'PUT /rooms HTTP/1.1\r\n' +
                        'Accept: application/json, text/plain, */*\r\n' +
                        'Content-Type: application/json\r\n' +
                        'User-Agent: axios/1.4.0\r\n' +
                        'Content-Length: 789\r\n' +
                        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                        'Host: localhost:4000\r\n' +
                        'Connection: close\r\n' +
                        '\r\n',
                      _keepAliveTimeout: 0,
                      _onPendingData: [Function: nop],
                      agent: [Circular *4],
                      socketPath: undefined,
                      method: 'PUT',
                      maxHeaderSize: undefined,
                      insecureHTTPParser: undefined,
                      path: '/rooms',
                      _ended: false,
                      res: null,
                      aborted: false,
                      timeoutCb: null,
                      upgradeOrConnect: false,
                      parser: [Circular *5],
                      maxHeadersCount: null,
                      reusedSocket: false,
                      host: 'localhost',
                      protocol: 'http:',
                      _redirectable: Writable {
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: true,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        _events: [Object: null prototype] {
                          response: [Function: handleResponse],
                          error: [Function: handleRequestError],
                          socket: [Function: handleRequestSocket]
                        },
                        _eventsCount: 3,
                        _maxListeners: undefined,
                        _options: {
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'http:',
                          path: '/rooms',
                          method: 'PUT',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            'User-Agent': 'axios/1.4.0',
                            'Content-Length': '789',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          lookup: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'localhost',
                          port: '4000',
                          agent: undefined,
                          nativeProtocols: {
                            'http:': {
                              _connectionListener: [Function: connectionListener],
                              METHODS: [
                                'ACL',         'BIND',       'CHECKOUT',
                                'CONNECT',     'COPY',       'DELETE',
                                'GET',         'HEAD',       'LINK',
                                'LOCK',        'M-SEARCH',   'MERGE',
                                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                                'MOVE',        'NOTIFY',     'OPTIONS',
                                'PATCH',       'POST',       'PROPFIND',
                                'PROPPATCH',   'PURGE',      'PUT',
                                'REBIND',      'REPORT',     'SEARCH',
                                'SOURCE',      'SUBSCRIBE',  'TRACE',
                                'UNBIND',      'UNLINK',     'UNLOCK',
                                'UNSUBSCRIBE'
                              ],
                              STATUS_CODES: {
                                '100': 'Continue',
                                '101': 'Switching Protocols',
                                '102': 'Processing',
                                '103': 'Early Hints',
                                '200': 'OK',
                                '201': 'Created',
                                '202': 'Accepted',
                                '203': 'Non-Authoritative Information',
                                '204': 'No Content',
                                '205': 'Reset Content',
                                '206': 'Partial Content',
                                '207': 'Multi-Status',
                                '208': 'Already Reported',
                                '226': 'IM Used',
                                '300': 'Multiple Choices',
                                '301': 'Moved Permanently',
                                '302': 'Found',
                                '303': 'See Other',
                                '304': 'Not Modified',
                                '305': 'Use Proxy',
                                '307': 'Temporary Redirect',
                                '308': 'Permanent Redirect',
                                '400': 'Bad Request',
                                '401': 'Unauthorized',
                                '402': 'Payment Required',
                                '403': 'Forbidden',
                                '404': 'Not Found',
                                '405': 'Method Not Allowed',
                                '406': 'Not Acceptable',
                                '407': 'Proxy Authentication Required',
                                '408': 'Request Timeout',
                                '409': 'Conflict',
                                '410': 'Gone',
                                '411': 'Length Required',
                                '412': 'Precondition Failed',
                                '413': 'Payload Too Large',
                                '414': 'URI Too Long',
                                '415': 'Unsupported Media Type',
                                '416': 'Range Not Satisfiable',
                                '417': 'Expectation Failed',
                                '418': "I'm a Teapot",
                                '421': 'Misdirected Request',
                                '422': 'Unprocessable Entity',
                                '423': 'Locked',
                                '424': 'Failed Dependency',
                                '425': 'Too Early',
                                '426': 'Upgrade Required',
                                '428': 'Precondition Required',
                                '429': 'Too Many Requests',
                                '431': 'Request Header Fields Too Large',
                                '451': 'Unavailable For Legal Reasons',
                                '500': 'Internal Server Error',
                                '501': 'Not Implemented',
                                '502': 'Bad Gateway',
                                '503': 'Service Unavailable',
                                '504': 'Gateway Timeout',
                                '505': 'HTTP Version Not Supported',
                                '506': 'Variant Also Negotiates',
                                '507': 'Insufficient Storage',
                                '508': 'Loop Detected',
                                '509': 'Bandwidth Limit Exceeded',
                                '510': 'Not Extended',
                                '511': 'Network Authentication Required'
                              },
                              Agent: [Function: Agent] {
                                defaultMaxSockets: Infinity
                              },
                              ClientRequest: [Function: ClientRequest],
                              IncomingMessage: [Function: IncomingMessage],
                              OutgoingMessage: [Function: OutgoingMessage],
                              Server: [Function: Server],
                              ServerResponse: [Function: ServerResponse],
                              createServer: [Function: createServer],
                              validateHeaderName: [Function: __node_internal_],
                              validateHeaderValue: [Function: __node_internal_],
                              get: [Function: get],
                              request: [Function: request],
                              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                              maxHeaderSize: [Getter],
                              globalAgent: [Getter/Setter]
                            },
                            'https:': {
                              Agent: [Function: Agent],
                              globalAgent: Agent {
                                _events: [Object: null prototype] {
                                  free: [Function (anonymous)],
                                  newListener: [Function: maybeEnableKeylog]
                                },
                                _eventsCount: 2,
                                _maxListeners: undefined,
                                defaultPort: 443,
                                protocol: 'https:',
                                options: [Object: null prototype] { path: null },
                                requests: [Object: null prototype] {},
                                sockets: [Object: null prototype] {},
                                freeSockets: [Object: null prototype] {},
                                keepAliveMsecs: 1000,
                                keepAlive: false,
                                maxSockets: Infinity,
                                maxFreeSockets: 256,
                                scheduling: 'lifo',
                                maxTotalSockets: Infinity,
                                totalSocketCount: 0,
                                maxCachedSessions: 100,
                                _sessionCache: {
                                  map: {
                                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 94 80 2a 35 cd 6f 45 45 d1 23 25 6a 98 f7 fc 13 18 d3 84 28 ba 8d 5c 37 11 2d 96 69 bf ac fd bf 04 ... 1708 more bytes>
                                  },
                                  list: [
                                    'screeps.com:443:::::::::::::::::::::'
                                  ]
                                },
                                [Symbol(kCapture)]: false
                              },
                              Server: [Function: Server],
                              createServer: [Function: createServer],
                              get: [Function: get],
                              request: [Function: request]
                            }
                          },
                          pathname: '/rooms'
                        },
                        _ended: true,
                        _ending: true,
                        _redirectCount: 0,
                        _redirects: [],
                        _requestBodyLength: 789,
                        _requestBodyBuffers: [
                          {
                            data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                            encoding: undefined
                          }
                        ],
                        _onNativeResponse: [Function (anonymous)],
                        _currentRequest: [Circular *6],
                        _currentUrl: 'http://localhost:4000/rooms',
                        [Symbol(kCapture)]: false
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(kEndCalled)]: true,
                      [Symbol(kNeedDrain)]: false,
                      [Symbol(corked)]: 0,
                      [Symbol(kOutHeaders)]: [Object: null prototype] {
                        accept: [ 'Accept', 'application/json, text/plain, */*' ],
                        'content-type': [ 'Content-Type', 'application/json' ],
                        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                        'content-length': [ 'Content-Length', '789' ],
                        'accept-encoding': [
                          'Accept-Encoding',
                          'gzip, compress, deflate, br'
                        ],
                        host: [ 'Host', 'localhost:4000' ]
                      },
                      [Symbol(kUniqueHeaders)]: null
                    }
                  }
                },
                _httpMessage: <ref *6> ClientRequest {
                  _events: [Object: null prototype] {
                    response: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    abort: [Function (anonymous)],
                    aborted: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    error: [Function (anonymous)],
                    socket: [Function (anonymous)],
                    timeout: [Function (anonymous)]
                  },
                  _eventsCount: 7,
                  _maxListeners: undefined,
                  outputData: [],
                  outputSize: 0,
                  writable: true,
                  destroyed: false,
                  _last: true,
                  chunkedEncoding: false,
                  shouldKeepAlive: false,
                  maxRequestsOnConnectionReached: false,
                  _defaultKeepAlive: true,
                  useChunkedEncodingByDefault: true,
                  sendDate: false,
                  _removedConnection: false,
                  _removedContLen: false,
                  _removedTE: false,
                  strictContentLength: false,
                  _contentLength: '789',
                  _hasBody: true,
                  _trailer: '',
                  finished: true,
                  _headerSent: true,
                  _closed: false,
                  socket: [Circular *3],
                  _header: 'PUT /rooms HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'User-Agent: axios/1.4.0\r\n' +
                    'Content-Length: 789\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:4000\r\n' +
                    'Connection: close\r\n' +
                    '\r\n',
                  _keepAliveTimeout: 0,
                  _onPendingData: [Function: nop],
                  agent: [Circular *4],
                  socketPath: undefined,
                  method: 'PUT',
                  maxHeaderSize: undefined,
                  insecureHTTPParser: undefined,
                  path: '/rooms',
                  _ended: false,
                  res: null,
                  aborted: false,
                  timeoutCb: null,
                  upgradeOrConnect: false,
                  parser: <ref *5> HTTPParser {
                    '0': null,
                    '1': [Function: parserOnHeaders],
                    '2': [Function: parserOnHeadersComplete],
                    '3': [Function: parserOnBody],
                    '4': [Function: parserOnMessageComplete],
                    '5': null,
                    '6': null,
                    _headers: [],
                    _url: '',
                    socket: [Circular *3],
                    incoming: null,
                    outgoing: [Circular *6],
                    maxHeaderPairs: 2000,
                    _consumed: false,
                    onIncoming: [Function: parserOnIncomingClient],
                    [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                      type: 'HTTPINCOMINGMESSAGE',
                      req: [Circular *6]
                    }
                  },
                  maxHeadersCount: null,
                  reusedSocket: false,
                  host: 'localhost',
                  protocol: 'http:',
                  _redirectable: Writable {
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: true,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: true,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    _events: [Object: null prototype] {
                      response: [Function: handleResponse],
                      error: [Function: handleRequestError],
                      socket: [Function: handleRequestSocket]
                    },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    _options: {
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'http:',
                      path: '/rooms',
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.4.0',
                        'Content-Length': '789',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      lookup: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'localhost',
                      port: '4000',
                      agent: undefined,
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] { path: null },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: {
                              map: {
                                'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 94 80 2a 35 cd 6f 45 45 d1 23 25 6a 98 f7 fc 13 18 d3 84 28 ba 8d 5c 37 11 2d 96 69 bf ac fd bf 04 ... 1708 more bytes>
                              },
                              list: [ 'screeps.com:443:::::::::::::::::::::' ]
                            },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/rooms'
                    },
                    _ended: true,
                    _ending: true,
                    _redirectCount: 0,
                    _redirects: [],
                    _requestBodyLength: 789,
                    _requestBodyBuffers: [
                      {
                        data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                        encoding: undefined
                      }
                    ],
                    _onNativeResponse: [Function (anonymous)],
                    _currentRequest: [Circular *6],
                    _currentUrl: 'http://localhost:4000/rooms',
                    [Symbol(kCapture)]: false
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(kEndCalled)]: true,
                  [Symbol(kNeedDrain)]: false,
                  [Symbol(corked)]: 0,
                  [Symbol(kOutHeaders)]: [Object: null prototype] {
                    accept: [ 'Accept', 'application/json, text/plain, */*' ],
                    'content-type': [ 'Content-Type', 'application/json' ],
                    'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                    'content-length': [ 'Content-Length', '789' ],
                    'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                    host: [ 'Host', 'localhost:4000' ]
                  },
                  [Symbol(kUniqueHeaders)]: null
                },
                [Symbol(async_id_symbol)]: 226899,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *3]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 2,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'GET',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        path: '/data',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 226583,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'X-Powered-By',
            'Express',
            'Content-Type',
            'application/json; charset=utf-8',
            'Content-Length',
            '20',
            'ETag',
            'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            'Date',
            'Mon, 05 Jun 2023 11:17:49 GMT',
            'Connection',
            'close'
          ],
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 500,
          statusMessage: 'Internal Server Error',
          client: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 226583,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'http://localhost:4000/data',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            'x-powered-by': 'Express',
            'content-type': 'application/json; charset=utf-8',
            'content-length': '20',
            etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            date: 'Mon, 05 Jun 2023 11:17:49 GMT',
            connection: 'close'
          },
          [Symbol(kHeadersCount)]: 12,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'http:',
            path: '/data',
            method: 'GET',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'localhost',
            port: '4000',
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 94 80 2a 35 cd 6f 45 45 d1 23 25 6a 98 f7 fc 13 18 d3 84 28 ba 8d 5c 37 11 2d 96 69 bf ac fd bf 04 ... 1708 more bytes>
                    },
                    list: [ 'screeps.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/data'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 0,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'http://localhost:4000/data',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:4000' ]
        },
        [Symbol(kUniqueHeaders)]: null
      },
      data: 'Failed to get data'
    },
    level: '\x1B[31merror\x1B[39m',
    stack: 'AxiosError: Request failed with status code 500\n' +
      '    at settle (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/adapters/http.js:570:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at endReadableNT (node:internal/streams/readable:1358:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:83:21)',
    timestamp: '2023-06-05T11:17:49.341Z'
  }
  {
    message: 'Request failed with status code 500',
    name: 'AxiosError',
    code: 'ERR_BAD_RESPONSE',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: null
      },
      validateStatus: [Function: validateStatus],
      headers: AxiosHeaders {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/1.4.0',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'get',
      url: 'http://localhost:4000/data',
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(async_id_symbol)]: 242546,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /data HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.4.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:4000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *4> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:4000:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(async_id_symbol)]: 242546,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(RequestTimeout)]: undefined
            },
            <ref *3> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [
                  [Function: onReadableStreamEnd],
                  [Function: socketOnEnd]
                ],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                data: [Function: socketOnData],
                drain: [Function: ondrain]
              },
              _eventsCount: 8,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: <ref *5> HTTPParser {
                '0': null,
                '1': [Function: parserOnHeaders],
                '2': [Function: parserOnHeadersComplete],
                '3': [Function: parserOnBody],
                '4': [Function: parserOnMessageComplete],
                '5': null,
                '6': null,
                _headers: [],
                _url: '',
                socket: [Circular *3],
                incoming: null,
                outgoing: <ref *6> ClientRequest {
                  _events: [Object: null prototype] {
                    response: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    abort: [Function (anonymous)],
                    aborted: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    error: [Function (anonymous)],
                    socket: [Function (anonymous)],
                    timeout: [Function (anonymous)]
                  },
                  _eventsCount: 7,
                  _maxListeners: undefined,
                  outputData: [],
                  outputSize: 0,
                  writable: true,
                  destroyed: false,
                  _last: true,
                  chunkedEncoding: false,
                  shouldKeepAlive: false,
                  maxRequestsOnConnectionReached: false,
                  _defaultKeepAlive: true,
                  useChunkedEncodingByDefault: true,
                  sendDate: false,
                  _removedConnection: false,
                  _removedContLen: false,
                  _removedTE: false,
                  strictContentLength: false,
                  _contentLength: '789',
                  _hasBody: true,
                  _trailer: '',
                  finished: true,
                  _headerSent: true,
                  _closed: false,
                  socket: [Circular *3],
                  _header: 'PUT /rooms HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'User-Agent: axios/1.4.0\r\n' +
                    'Content-Length: 789\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:4000\r\n' +
                    'Connection: close\r\n' +
                    '\r\n',
                  _keepAliveTimeout: 0,
                  _onPendingData: [Function: nop],
                  agent: [Circular *4],
                  socketPath: undefined,
                  method: 'PUT',
                  maxHeaderSize: undefined,
                  insecureHTTPParser: undefined,
                  path: '/rooms',
                  _ended: false,
                  res: null,
                  aborted: false,
                  timeoutCb: null,
                  upgradeOrConnect: false,
                  parser: [Circular *5],
                  maxHeadersCount: null,
                  reusedSocket: false,
                  host: 'localhost',
                  protocol: 'http:',
                  _redirectable: Writable {
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: true,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: true,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    _events: [Object: null prototype] {
                      response: [Function: handleResponse],
                      error: [Function: handleRequestError],
                      socket: [Function: handleRequestSocket]
                    },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    _options: {
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'http:',
                      path: '/rooms',
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.4.0',
                        'Content-Length': '789',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      lookup: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'localhost',
                      port: '4000',
                      agent: undefined,
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] { path: null },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: {
                              map: {
                                'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 47 46 c8 da 8b 61 6b ed ba e1 79 7d 4c 20 0b e3 7d c8 44 df c8 fc dc c6 bc ce 7b 73 5a 36 c2 4d 04 ... 1708 more bytes>
                              },
                              list: [ 'screeps.com:443:::::::::::::::::::::' ]
                            },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/rooms'
                    },
                    _ended: true,
                    _ending: true,
                    _redirectCount: 0,
                    _redirects: [],
                    _requestBodyLength: 789,
                    _requestBodyBuffers: [
                      {
                        data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                        encoding: undefined
                      }
                    ],
                    _onNativeResponse: [Function (anonymous)],
                    _currentRequest: [Circular *6],
                    _currentUrl: 'http://localhost:4000/rooms',
                    [Symbol(kCapture)]: false
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(kEndCalled)]: true,
                  [Symbol(kNeedDrain)]: false,
                  [Symbol(corked)]: 0,
                  [Symbol(kOutHeaders)]: [Object: null prototype] {
                    accept: [ 'Accept', 'application/json, text/plain, */*' ],
                    'content-type': [ 'Content-Type', 'application/json' ],
                    'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                    'content-length': [ 'Content-Length', '789' ],
                    'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                    host: [ 'Host', 'localhost:4000' ]
                  },
                  [Symbol(kUniqueHeaders)]: null
                },
                maxHeaderPairs: 2000,
                _consumed: false,
                onIncoming: [Function: parserOnIncomingClient],
                [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                  type: 'HTTPINCOMINGMESSAGE',
                  req: <ref *6> ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '789',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *3],
                    _header: 'PUT /rooms HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.4.0\r\n' +
                      'Content-Length: 789\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:4000\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *4],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    path: '/rooms',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: [Circular *5],
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'localhost',
                    protocol: 'http:',
                    _redirectable: Writable {
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: false,
                        decodeStrings: true,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: true,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: true,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      _events: [Object: null prototype] {
                        response: [Function: handleResponse],
                        error: [Function: handleRequestError],
                        socket: [Function: handleRequestSocket]
                      },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      _options: {
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'http:',
                        path: '/rooms',
                        method: 'PUT',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.4.0',
                          'Content-Length': '789',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        lookup: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'localhost',
                        port: '4000',
                        agent: undefined,
                        nativeProtocols: {
                          'http:': {
                            _connectionListener: [Function: connectionListener],
                            METHODS: [
                              'ACL',         'BIND',       'CHECKOUT',
                              'CONNECT',     'COPY',       'DELETE',
                              'GET',         'HEAD',       'LINK',
                              'LOCK',        'M-SEARCH',   'MERGE',
                              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                              'MOVE',        'NOTIFY',     'OPTIONS',
                              'PATCH',       'POST',       'PROPFIND',
                              'PROPPATCH',   'PURGE',      'PUT',
                              'REBIND',      'REPORT',     'SEARCH',
                              'SOURCE',      'SUBSCRIBE',  'TRACE',
                              'UNBIND',      'UNLINK',     'UNLOCK',
                              'UNSUBSCRIBE'
                            ],
                            STATUS_CODES: {
                              '100': 'Continue',
                              '101': 'Switching Protocols',
                              '102': 'Processing',
                              '103': 'Early Hints',
                              '200': 'OK',
                              '201': 'Created',
                              '202': 'Accepted',
                              '203': 'Non-Authoritative Information',
                              '204': 'No Content',
                              '205': 'Reset Content',
                              '206': 'Partial Content',
                              '207': 'Multi-Status',
                              '208': 'Already Reported',
                              '226': 'IM Used',
                              '300': 'Multiple Choices',
                              '301': 'Moved Permanently',
                              '302': 'Found',
                              '303': 'See Other',
                              '304': 'Not Modified',
                              '305': 'Use Proxy',
                              '307': 'Temporary Redirect',
                              '308': 'Permanent Redirect',
                              '400': 'Bad Request',
                              '401': 'Unauthorized',
                              '402': 'Payment Required',
                              '403': 'Forbidden',
                              '404': 'Not Found',
                              '405': 'Method Not Allowed',
                              '406': 'Not Acceptable',
                              '407': 'Proxy Authentication Required',
                              '408': 'Request Timeout',
                              '409': 'Conflict',
                              '410': 'Gone',
                              '411': 'Length Required',
                              '412': 'Precondition Failed',
                              '413': 'Payload Too Large',
                              '414': 'URI Too Long',
                              '415': 'Unsupported Media Type',
                              '416': 'Range Not Satisfiable',
                              '417': 'Expectation Failed',
                              '418': "I'm a Teapot",
                              '421': 'Misdirected Request',
                              '422': 'Unprocessable Entity',
                              '423': 'Locked',
                              '424': 'Failed Dependency',
                              '425': 'Too Early',
                              '426': 'Upgrade Required',
                              '428': 'Precondition Required',
                              '429': 'Too Many Requests',
                              '431': 'Request Header Fields Too Large',
                              '451': 'Unavailable For Legal Reasons',
                              '500': 'Internal Server Error',
                              '501': 'Not Implemented',
                              '502': 'Bad Gateway',
                              '503': 'Service Unavailable',
                              '504': 'Gateway Timeout',
                              '505': 'HTTP Version Not Supported',
                              '506': 'Variant Also Negotiates',
                              '507': 'Insufficient Storage',
                              '508': 'Loop Detected',
                              '509': 'Bandwidth Limit Exceeded',
                              '510': 'Not Extended',
                              '511': 'Network Authentication Required'
                            },
                            Agent: [Function: Agent] {
                              defaultMaxSockets: Infinity
                            },
                            ClientRequest: [Function: ClientRequest],
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            validateHeaderName: [Function: __node_internal_],
                            validateHeaderValue: [Function: __node_internal_],
                            get: [Function: get],
                            request: [Function: request],
                            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                            maxHeaderSize: [Getter],
                            globalAgent: [Getter/Setter]
                          },
                          'https:': {
                            Agent: [Function: Agent],
                            globalAgent: Agent {
                              _events: [Object: null prototype] {
                                free: [Function (anonymous)],
                                newListener: [Function: maybeEnableKeylog]
                              },
                              _eventsCount: 2,
                              _maxListeners: undefined,
                              defaultPort: 443,
                              protocol: 'https:',
                              options: [Object: null prototype] { path: null },
                              requests: [Object: null prototype] {},
                              sockets: [Object: null prototype] {},
                              freeSockets: [Object: null prototype] {},
                              keepAliveMsecs: 1000,
                              keepAlive: false,
                              maxSockets: Infinity,
                              maxFreeSockets: 256,
                              scheduling: 'lifo',
                              maxTotalSockets: Infinity,
                              totalSocketCount: 0,
                              maxCachedSessions: 100,
                              _sessionCache: {
                                map: {
                                  'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 47 46 c8 da 8b 61 6b ed ba e1 79 7d 4c 20 0b e3 7d c8 44 df c8 fc dc c6 bc ce 7b 73 5a 36 c2 4d 04 ... 1708 more bytes>
                                },
                                list: [
                                  'screeps.com:443:::::::::::::::::::::'
                                ]
                              },
                              [Symbol(kCapture)]: false
                            },
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request]
                          }
                        },
                        pathname: '/rooms'
                      },
                      _ended: true,
                      _ending: true,
                      _redirectCount: 0,
                      _redirects: [],
                      _requestBodyLength: 789,
                      _requestBodyBuffers: [
                        {
                          data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                          encoding: undefined
                        }
                      ],
                      _onNativeResponse: [Function (anonymous)],
                      _currentRequest: [Circular *6],
                      _currentUrl: 'http://localhost:4000/rooms',
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kEndCalled)]: true,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                      'content-length': [ 'Content-Length', '789' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'localhost:4000' ]
                    },
                    [Symbol(kUniqueHeaders)]: null
                  }
                }
              },
              _httpMessage: <ref *6> ClientRequest {
                _events: [Object: null prototype] {
                  response: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  abort: [Function (anonymous)],
                  aborted: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  error: [Function (anonymous)],
                  socket: [Function (anonymous)],
                  timeout: [Function (anonymous)]
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                outputData: [],
                outputSize: 0,
                writable: true,
                destroyed: false,
                _last: true,
                chunkedEncoding: false,
                shouldKeepAlive: false,
                maxRequestsOnConnectionReached: false,
                _defaultKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: false,
                _removedConnection: false,
                _removedContLen: false,
                _removedTE: false,
                strictContentLength: false,
                _contentLength: '789',
                _hasBody: true,
                _trailer: '',
                finished: true,
                _headerSent: true,
                _closed: false,
                socket: [Circular *3],
                _header: 'PUT /rooms HTTP/1.1\r\n' +
                  'Accept: application/json, text/plain, */*\r\n' +
                  'Content-Type: application/json\r\n' +
                  'User-Agent: axios/1.4.0\r\n' +
                  'Content-Length: 789\r\n' +
                  'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                  'Host: localhost:4000\r\n' +
                  'Connection: close\r\n' +
                  '\r\n',
                _keepAliveTimeout: 0,
                _onPendingData: [Function: nop],
                agent: [Circular *4],
                socketPath: undefined,
                method: 'PUT',
                maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                path: '/rooms',
                _ended: false,
                res: null,
                aborted: false,
                timeoutCb: null,
                upgradeOrConnect: false,
                parser: <ref *5> HTTPParser {
                  '0': null,
                  '1': [Function: parserOnHeaders],
                  '2': [Function: parserOnHeadersComplete],
                  '3': [Function: parserOnBody],
                  '4': [Function: parserOnMessageComplete],
                  '5': null,
                  '6': null,
                  _headers: [],
                  _url: '',
                  socket: [Circular *3],
                  incoming: null,
                  outgoing: [Circular *6],
                  maxHeaderPairs: 2000,
                  _consumed: false,
                  onIncoming: [Function: parserOnIncomingClient],
                  [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                    type: 'HTTPINCOMINGMESSAGE',
                    req: [Circular *6]
                  }
                },
                maxHeadersCount: null,
                reusedSocket: false,
                host: 'localhost',
                protocol: 'http:',
                _redirectable: Writable {
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: true,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: true,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  _events: [Object: null prototype] {
                    response: [Function: handleResponse],
                    error: [Function: handleRequestError],
                    socket: [Function: handleRequestSocket]
                  },
                  _eventsCount: 3,
                  _maxListeners: undefined,
                  _options: {
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'http:',
                    path: '/rooms',
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.4.0',
                      'Content-Length': '789',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    lookup: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'localhost',
                    port: '4000',
                    agent: undefined,
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] { path: null },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: {
                            map: {
                              'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 47 46 c8 da 8b 61 6b ed ba e1 79 7d 4c 20 0b e3 7d c8 44 df c8 fc dc c6 bc ce 7b 73 5a 36 c2 4d 04 ... 1708 more bytes>
                            },
                            list: [ 'screeps.com:443:::::::::::::::::::::' ]
                          },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/rooms'
                  },
                  _ended: true,
                  _ending: true,
                  _redirectCount: 0,
                  _redirects: [],
                  _requestBodyLength: 789,
                  _requestBodyBuffers: [
                    {
                      data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                      encoding: undefined
                    }
                  ],
                  _onNativeResponse: [Function (anonymous)],
                  _currentRequest: [Circular *6],
                  _currentUrl: 'http://localhost:4000/rooms',
                  [Symbol(kCapture)]: false
                },
                [Symbol(kCapture)]: false,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(kEndCalled)]: true,
                [Symbol(kNeedDrain)]: false,
                [Symbol(corked)]: 0,
                [Symbol(kOutHeaders)]: [Object: null prototype] {
                  accept: [ 'Accept', 'application/json, text/plain, */*' ],
                  'content-type': [ 'Content-Type', 'application/json' ],
                  'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                  'content-length': [ 'Content-Length', '789' ],
                  'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                  host: [ 'Host', 'localhost:4000' ]
                },
                [Symbol(kUniqueHeaders)]: null
              },
              [Symbol(async_id_symbol)]: 242855,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *3]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 2,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/data',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 242546,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Content-Type',
          'application/json; charset=utf-8',
          'Content-Length',
          '20',
          'ETag',
          'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          'Date',
          'Mon, 05 Jun 2023 11:48:10 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Internal Server Error',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 242546,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://localhost:4000/data',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'content-type': 'application/json; charset=utf-8',
          'content-length': '20',
          etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          date: 'Mon, 05 Jun 2023 11:48:10 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 12,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/data',
          method: 'GET',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.4.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          lookup: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'localhost',
          port: '4000',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 47 46 c8 da 8b 61 6b ed ba e1 79 7d 4c 20 0b e3 7d c8 44 df c8 fc dc c6 bc ce 7b 73 5a 36 c2 4d 04 ... 1708 more bytes>
                  },
                  list: [ 'screeps.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/data'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://localhost:4000/data',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kEndCalled)]: true,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:4000' ]
      },
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 500,
      statusText: 'Internal Server Error',
      headers: AxiosHeaders {
        'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '20',
        etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
        date: 'Mon, 05 Jun 2023 11:48:10 GMT',
        connection: 'close'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: null
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.4.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'get',
        url: 'http://localhost:4000/data',
        data: undefined
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 242546,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _header: 'GET /data HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'User-Agent: axios/1.4.0\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:4000\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *4> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:4000:': [
              <ref *2> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(async_id_symbol)]: 242546,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(RequestTimeout)]: undefined
              },
              <ref *3> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [
                    [Function: onReadableStreamEnd],
                    [Function: socketOnEnd]
                  ],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  data: [Function: socketOnData],
                  drain: [Function: ondrain]
                },
                _eventsCount: 8,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: false,
                  needDrain: false,
                  ending: false,
                  ended: false,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: <ref *5> HTTPParser {
                  '0': null,
                  '1': [Function: parserOnHeaders],
                  '2': [Function: parserOnHeadersComplete],
                  '3': [Function: parserOnBody],
                  '4': [Function: parserOnMessageComplete],
                  '5': null,
                  '6': null,
                  _headers: [],
                  _url: '',
                  socket: [Circular *3],
                  incoming: null,
                  outgoing: <ref *6> ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '789',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *3],
                    _header: 'PUT /rooms HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.4.0\r\n' +
                      'Content-Length: 789\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:4000\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *4],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    path: '/rooms',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: [Circular *5],
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'localhost',
                    protocol: 'http:',
                    _redirectable: Writable {
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: false,
                        decodeStrings: true,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: true,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: true,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      _events: [Object: null prototype] {
                        response: [Function: handleResponse],
                        error: [Function: handleRequestError],
                        socket: [Function: handleRequestSocket]
                      },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      _options: {
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'http:',
                        path: '/rooms',
                        method: 'PUT',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.4.0',
                          'Content-Length': '789',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        lookup: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'localhost',
                        port: '4000',
                        agent: undefined,
                        nativeProtocols: {
                          'http:': {
                            _connectionListener: [Function: connectionListener],
                            METHODS: [
                              'ACL',         'BIND',       'CHECKOUT',
                              'CONNECT',     'COPY',       'DELETE',
                              'GET',         'HEAD',       'LINK',
                              'LOCK',        'M-SEARCH',   'MERGE',
                              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                              'MOVE',        'NOTIFY',     'OPTIONS',
                              'PATCH',       'POST',       'PROPFIND',
                              'PROPPATCH',   'PURGE',      'PUT',
                              'REBIND',      'REPORT',     'SEARCH',
                              'SOURCE',      'SUBSCRIBE',  'TRACE',
                              'UNBIND',      'UNLINK',     'UNLOCK',
                              'UNSUBSCRIBE'
                            ],
                            STATUS_CODES: {
                              '100': 'Continue',
                              '101': 'Switching Protocols',
                              '102': 'Processing',
                              '103': 'Early Hints',
                              '200': 'OK',
                              '201': 'Created',
                              '202': 'Accepted',
                              '203': 'Non-Authoritative Information',
                              '204': 'No Content',
                              '205': 'Reset Content',
                              '206': 'Partial Content',
                              '207': 'Multi-Status',
                              '208': 'Already Reported',
                              '226': 'IM Used',
                              '300': 'Multiple Choices',
                              '301': 'Moved Permanently',
                              '302': 'Found',
                              '303': 'See Other',
                              '304': 'Not Modified',
                              '305': 'Use Proxy',
                              '307': 'Temporary Redirect',
                              '308': 'Permanent Redirect',
                              '400': 'Bad Request',
                              '401': 'Unauthorized',
                              '402': 'Payment Required',
                              '403': 'Forbidden',
                              '404': 'Not Found',
                              '405': 'Method Not Allowed',
                              '406': 'Not Acceptable',
                              '407': 'Proxy Authentication Required',
                              '408': 'Request Timeout',
                              '409': 'Conflict',
                              '410': 'Gone',
                              '411': 'Length Required',
                              '412': 'Precondition Failed',
                              '413': 'Payload Too Large',
                              '414': 'URI Too Long',
                              '415': 'Unsupported Media Type',
                              '416': 'Range Not Satisfiable',
                              '417': 'Expectation Failed',
                              '418': "I'm a Teapot",
                              '421': 'Misdirected Request',
                              '422': 'Unprocessable Entity',
                              '423': 'Locked',
                              '424': 'Failed Dependency',
                              '425': 'Too Early',
                              '426': 'Upgrade Required',
                              '428': 'Precondition Required',
                              '429': 'Too Many Requests',
                              '431': 'Request Header Fields Too Large',
                              '451': 'Unavailable For Legal Reasons',
                              '500': 'Internal Server Error',
                              '501': 'Not Implemented',
                              '502': 'Bad Gateway',
                              '503': 'Service Unavailable',
                              '504': 'Gateway Timeout',
                              '505': 'HTTP Version Not Supported',
                              '506': 'Variant Also Negotiates',
                              '507': 'Insufficient Storage',
                              '508': 'Loop Detected',
                              '509': 'Bandwidth Limit Exceeded',
                              '510': 'Not Extended',
                              '511': 'Network Authentication Required'
                            },
                            Agent: [Function: Agent] {
                              defaultMaxSockets: Infinity
                            },
                            ClientRequest: [Function: ClientRequest],
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            validateHeaderName: [Function: __node_internal_],
                            validateHeaderValue: [Function: __node_internal_],
                            get: [Function: get],
                            request: [Function: request],
                            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                            maxHeaderSize: [Getter],
                            globalAgent: [Getter/Setter]
                          },
                          'https:': {
                            Agent: [Function: Agent],
                            globalAgent: Agent {
                              _events: [Object: null prototype] {
                                free: [Function (anonymous)],
                                newListener: [Function: maybeEnableKeylog]
                              },
                              _eventsCount: 2,
                              _maxListeners: undefined,
                              defaultPort: 443,
                              protocol: 'https:',
                              options: [Object: null prototype] { path: null },
                              requests: [Object: null prototype] {},
                              sockets: [Object: null prototype] {},
                              freeSockets: [Object: null prototype] {},
                              keepAliveMsecs: 1000,
                              keepAlive: false,
                              maxSockets: Infinity,
                              maxFreeSockets: 256,
                              scheduling: 'lifo',
                              maxTotalSockets: Infinity,
                              totalSocketCount: 0,
                              maxCachedSessions: 100,
                              _sessionCache: {
                                map: {
                                  'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 47 46 c8 da 8b 61 6b ed ba e1 79 7d 4c 20 0b e3 7d c8 44 df c8 fc dc c6 bc ce 7b 73 5a 36 c2 4d 04 ... 1708 more bytes>
                                },
                                list: [
                                  'screeps.com:443:::::::::::::::::::::'
                                ]
                              },
                              [Symbol(kCapture)]: false
                            },
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request]
                          }
                        },
                        pathname: '/rooms'
                      },
                      _ended: true,
                      _ending: true,
                      _redirectCount: 0,
                      _redirects: [],
                      _requestBodyLength: 789,
                      _requestBodyBuffers: [
                        {
                          data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                          encoding: undefined
                        }
                      ],
                      _onNativeResponse: [Function (anonymous)],
                      _currentRequest: [Circular *6],
                      _currentUrl: 'http://localhost:4000/rooms',
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kEndCalled)]: true,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                      'content-length': [ 'Content-Length', '789' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'localhost:4000' ]
                    },
                    [Symbol(kUniqueHeaders)]: null
                  },
                  maxHeaderPairs: 2000,
                  _consumed: false,
                  onIncoming: [Function: parserOnIncomingClient],
                  [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                    type: 'HTTPINCOMINGMESSAGE',
                    req: <ref *6> ClientRequest {
                      _events: [Object: null prototype] {
                        response: [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        abort: [Function (anonymous)],
                        aborted: [Function (anonymous)],
                        connect: [Function (anonymous)],
                        error: [Function (anonymous)],
                        socket: [Function (anonymous)],
                        timeout: [Function (anonymous)]
                      },
                      _eventsCount: 7,
                      _maxListeners: undefined,
                      outputData: [],
                      outputSize: 0,
                      writable: true,
                      destroyed: false,
                      _last: true,
                      chunkedEncoding: false,
                      shouldKeepAlive: false,
                      maxRequestsOnConnectionReached: false,
                      _defaultKeepAlive: true,
                      useChunkedEncodingByDefault: true,
                      sendDate: false,
                      _removedConnection: false,
                      _removedContLen: false,
                      _removedTE: false,
                      strictContentLength: false,
                      _contentLength: '789',
                      _hasBody: true,
                      _trailer: '',
                      finished: true,
                      _headerSent: true,
                      _closed: false,
                      socket: [Circular *3],
                      _header: 'PUT /rooms HTTP/1.1\r\n' +
                        'Accept: application/json, text/plain, */*\r\n' +
                        'Content-Type: application/json\r\n' +
                        'User-Agent: axios/1.4.0\r\n' +
                        'Content-Length: 789\r\n' +
                        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                        'Host: localhost:4000\r\n' +
                        'Connection: close\r\n' +
                        '\r\n',
                      _keepAliveTimeout: 0,
                      _onPendingData: [Function: nop],
                      agent: [Circular *4],
                      socketPath: undefined,
                      method: 'PUT',
                      maxHeaderSize: undefined,
                      insecureHTTPParser: undefined,
                      path: '/rooms',
                      _ended: false,
                      res: null,
                      aborted: false,
                      timeoutCb: null,
                      upgradeOrConnect: false,
                      parser: [Circular *5],
                      maxHeadersCount: null,
                      reusedSocket: false,
                      host: 'localhost',
                      protocol: 'http:',
                      _redirectable: Writable {
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: true,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        _events: [Object: null prototype] {
                          response: [Function: handleResponse],
                          error: [Function: handleRequestError],
                          socket: [Function: handleRequestSocket]
                        },
                        _eventsCount: 3,
                        _maxListeners: undefined,
                        _options: {
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'http:',
                          path: '/rooms',
                          method: 'PUT',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            'User-Agent': 'axios/1.4.0',
                            'Content-Length': '789',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          lookup: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'localhost',
                          port: '4000',
                          agent: undefined,
                          nativeProtocols: {
                            'http:': {
                              _connectionListener: [Function: connectionListener],
                              METHODS: [
                                'ACL',         'BIND',       'CHECKOUT',
                                'CONNECT',     'COPY',       'DELETE',
                                'GET',         'HEAD',       'LINK',
                                'LOCK',        'M-SEARCH',   'MERGE',
                                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                                'MOVE',        'NOTIFY',     'OPTIONS',
                                'PATCH',       'POST',       'PROPFIND',
                                'PROPPATCH',   'PURGE',      'PUT',
                                'REBIND',      'REPORT',     'SEARCH',
                                'SOURCE',      'SUBSCRIBE',  'TRACE',
                                'UNBIND',      'UNLINK',     'UNLOCK',
                                'UNSUBSCRIBE'
                              ],
                              STATUS_CODES: {
                                '100': 'Continue',
                                '101': 'Switching Protocols',
                                '102': 'Processing',
                                '103': 'Early Hints',
                                '200': 'OK',
                                '201': 'Created',
                                '202': 'Accepted',
                                '203': 'Non-Authoritative Information',
                                '204': 'No Content',
                                '205': 'Reset Content',
                                '206': 'Partial Content',
                                '207': 'Multi-Status',
                                '208': 'Already Reported',
                                '226': 'IM Used',
                                '300': 'Multiple Choices',
                                '301': 'Moved Permanently',
                                '302': 'Found',
                                '303': 'See Other',
                                '304': 'Not Modified',
                                '305': 'Use Proxy',
                                '307': 'Temporary Redirect',
                                '308': 'Permanent Redirect',
                                '400': 'Bad Request',
                                '401': 'Unauthorized',
                                '402': 'Payment Required',
                                '403': 'Forbidden',
                                '404': 'Not Found',
                                '405': 'Method Not Allowed',
                                '406': 'Not Acceptable',
                                '407': 'Proxy Authentication Required',
                                '408': 'Request Timeout',
                                '409': 'Conflict',
                                '410': 'Gone',
                                '411': 'Length Required',
                                '412': 'Precondition Failed',
                                '413': 'Payload Too Large',
                                '414': 'URI Too Long',
                                '415': 'Unsupported Media Type',
                                '416': 'Range Not Satisfiable',
                                '417': 'Expectation Failed',
                                '418': "I'm a Teapot",
                                '421': 'Misdirected Request',
                                '422': 'Unprocessable Entity',
                                '423': 'Locked',
                                '424': 'Failed Dependency',
                                '425': 'Too Early',
                                '426': 'Upgrade Required',
                                '428': 'Precondition Required',
                                '429': 'Too Many Requests',
                                '431': 'Request Header Fields Too Large',
                                '451': 'Unavailable For Legal Reasons',
                                '500': 'Internal Server Error',
                                '501': 'Not Implemented',
                                '502': 'Bad Gateway',
                                '503': 'Service Unavailable',
                                '504': 'Gateway Timeout',
                                '505': 'HTTP Version Not Supported',
                                '506': 'Variant Also Negotiates',
                                '507': 'Insufficient Storage',
                                '508': 'Loop Detected',
                                '509': 'Bandwidth Limit Exceeded',
                                '510': 'Not Extended',
                                '511': 'Network Authentication Required'
                              },
                              Agent: [Function: Agent] {
                                defaultMaxSockets: Infinity
                              },
                              ClientRequest: [Function: ClientRequest],
                              IncomingMessage: [Function: IncomingMessage],
                              OutgoingMessage: [Function: OutgoingMessage],
                              Server: [Function: Server],
                              ServerResponse: [Function: ServerResponse],
                              createServer: [Function: createServer],
                              validateHeaderName: [Function: __node_internal_],
                              validateHeaderValue: [Function: __node_internal_],
                              get: [Function: get],
                              request: [Function: request],
                              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                              maxHeaderSize: [Getter],
                              globalAgent: [Getter/Setter]
                            },
                            'https:': {
                              Agent: [Function: Agent],
                              globalAgent: Agent {
                                _events: [Object: null prototype] {
                                  free: [Function (anonymous)],
                                  newListener: [Function: maybeEnableKeylog]
                                },
                                _eventsCount: 2,
                                _maxListeners: undefined,
                                defaultPort: 443,
                                protocol: 'https:',
                                options: [Object: null prototype] { path: null },
                                requests: [Object: null prototype] {},
                                sockets: [Object: null prototype] {},
                                freeSockets: [Object: null prototype] {},
                                keepAliveMsecs: 1000,
                                keepAlive: false,
                                maxSockets: Infinity,
                                maxFreeSockets: 256,
                                scheduling: 'lifo',
                                maxTotalSockets: Infinity,
                                totalSocketCount: 0,
                                maxCachedSessions: 100,
                                _sessionCache: {
                                  map: {
                                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 47 46 c8 da 8b 61 6b ed ba e1 79 7d 4c 20 0b e3 7d c8 44 df c8 fc dc c6 bc ce 7b 73 5a 36 c2 4d 04 ... 1708 more bytes>
                                  },
                                  list: [
                                    'screeps.com:443:::::::::::::::::::::'
                                  ]
                                },
                                [Symbol(kCapture)]: false
                              },
                              Server: [Function: Server],
                              createServer: [Function: createServer],
                              get: [Function: get],
                              request: [Function: request]
                            }
                          },
                          pathname: '/rooms'
                        },
                        _ended: true,
                        _ending: true,
                        _redirectCount: 0,
                        _redirects: [],
                        _requestBodyLength: 789,
                        _requestBodyBuffers: [
                          {
                            data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                            encoding: undefined
                          }
                        ],
                        _onNativeResponse: [Function (anonymous)],
                        _currentRequest: [Circular *6],
                        _currentUrl: 'http://localhost:4000/rooms',
                        [Symbol(kCapture)]: false
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(kEndCalled)]: true,
                      [Symbol(kNeedDrain)]: false,
                      [Symbol(corked)]: 0,
                      [Symbol(kOutHeaders)]: [Object: null prototype] {
                        accept: [ 'Accept', 'application/json, text/plain, */*' ],
                        'content-type': [ 'Content-Type', 'application/json' ],
                        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                        'content-length': [ 'Content-Length', '789' ],
                        'accept-encoding': [
                          'Accept-Encoding',
                          'gzip, compress, deflate, br'
                        ],
                        host: [ 'Host', 'localhost:4000' ]
                      },
                      [Symbol(kUniqueHeaders)]: null
                    }
                  }
                },
                _httpMessage: <ref *6> ClientRequest {
                  _events: [Object: null prototype] {
                    response: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    abort: [Function (anonymous)],
                    aborted: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    error: [Function (anonymous)],
                    socket: [Function (anonymous)],
                    timeout: [Function (anonymous)]
                  },
                  _eventsCount: 7,
                  _maxListeners: undefined,
                  outputData: [],
                  outputSize: 0,
                  writable: true,
                  destroyed: false,
                  _last: true,
                  chunkedEncoding: false,
                  shouldKeepAlive: false,
                  maxRequestsOnConnectionReached: false,
                  _defaultKeepAlive: true,
                  useChunkedEncodingByDefault: true,
                  sendDate: false,
                  _removedConnection: false,
                  _removedContLen: false,
                  _removedTE: false,
                  strictContentLength: false,
                  _contentLength: '789',
                  _hasBody: true,
                  _trailer: '',
                  finished: true,
                  _headerSent: true,
                  _closed: false,
                  socket: [Circular *3],
                  _header: 'PUT /rooms HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'User-Agent: axios/1.4.0\r\n' +
                    'Content-Length: 789\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:4000\r\n' +
                    'Connection: close\r\n' +
                    '\r\n',
                  _keepAliveTimeout: 0,
                  _onPendingData: [Function: nop],
                  agent: [Circular *4],
                  socketPath: undefined,
                  method: 'PUT',
                  maxHeaderSize: undefined,
                  insecureHTTPParser: undefined,
                  path: '/rooms',
                  _ended: false,
                  res: null,
                  aborted: false,
                  timeoutCb: null,
                  upgradeOrConnect: false,
                  parser: <ref *5> HTTPParser {
                    '0': null,
                    '1': [Function: parserOnHeaders],
                    '2': [Function: parserOnHeadersComplete],
                    '3': [Function: parserOnBody],
                    '4': [Function: parserOnMessageComplete],
                    '5': null,
                    '6': null,
                    _headers: [],
                    _url: '',
                    socket: [Circular *3],
                    incoming: null,
                    outgoing: [Circular *6],
                    maxHeaderPairs: 2000,
                    _consumed: false,
                    onIncoming: [Function: parserOnIncomingClient],
                    [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                      type: 'HTTPINCOMINGMESSAGE',
                      req: [Circular *6]
                    }
                  },
                  maxHeadersCount: null,
                  reusedSocket: false,
                  host: 'localhost',
                  protocol: 'http:',
                  _redirectable: Writable {
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: true,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: true,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    _events: [Object: null prototype] {
                      response: [Function: handleResponse],
                      error: [Function: handleRequestError],
                      socket: [Function: handleRequestSocket]
                    },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    _options: {
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'http:',
                      path: '/rooms',
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.4.0',
                        'Content-Length': '789',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      lookup: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'localhost',
                      port: '4000',
                      agent: undefined,
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] { path: null },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: {
                              map: {
                                'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 47 46 c8 da 8b 61 6b ed ba e1 79 7d 4c 20 0b e3 7d c8 44 df c8 fc dc c6 bc ce 7b 73 5a 36 c2 4d 04 ... 1708 more bytes>
                              },
                              list: [ 'screeps.com:443:::::::::::::::::::::' ]
                            },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/rooms'
                    },
                    _ended: true,
                    _ending: true,
                    _redirectCount: 0,
                    _redirects: [],
                    _requestBodyLength: 789,
                    _requestBodyBuffers: [
                      {
                        data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 32 38 22 2c 22 45 31 37 4e 32 36 22 2c 22 45 36 4e 32 32 22 ... 739 more bytes>,
                        encoding: undefined
                      }
                    ],
                    _onNativeResponse: [Function (anonymous)],
                    _currentRequest: [Circular *6],
                    _currentUrl: 'http://localhost:4000/rooms',
                    [Symbol(kCapture)]: false
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(kEndCalled)]: true,
                  [Symbol(kNeedDrain)]: false,
                  [Symbol(corked)]: 0,
                  [Symbol(kOutHeaders)]: [Object: null prototype] {
                    accept: [ 'Accept', 'application/json, text/plain, */*' ],
                    'content-type': [ 'Content-Type', 'application/json' ],
                    'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                    'content-length': [ 'Content-Length', '789' ],
                    'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                    host: [ 'Host', 'localhost:4000' ]
                  },
                  [Symbol(kUniqueHeaders)]: null
                },
                [Symbol(async_id_symbol)]: 242855,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *3]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 2,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'GET',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        path: '/data',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 242546,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'X-Powered-By',
            'Express',
            'Content-Type',
            'application/json; charset=utf-8',
            'Content-Length',
            '20',
            'ETag',
            'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            'Date',
            'Mon, 05 Jun 2023 11:48:10 GMT',
            'Connection',
            'close'
          ],
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 500,
          statusMessage: 'Internal Server Error',
          client: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 242546,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'http://localhost:4000/data',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            'x-powered-by': 'Express',
            'content-type': 'application/json; charset=utf-8',
            'content-length': '20',
            etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            date: 'Mon, 05 Jun 2023 11:48:10 GMT',
            connection: 'close'
          },
          [Symbol(kHeadersCount)]: 12,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'http:',
            path: '/data',
            method: 'GET',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'localhost',
            port: '4000',
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 47 46 c8 da 8b 61 6b ed ba e1 79 7d 4c 20 0b e3 7d c8 44 df c8 fc dc c6 bc ce 7b 73 5a 36 c2 4d 04 ... 1708 more bytes>
                    },
                    list: [ 'screeps.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/data'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 0,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'http://localhost:4000/data',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:4000' ]
        },
        [Symbol(kUniqueHeaders)]: null
      },
      data: 'Failed to get data'
    },
    level: '\x1B[31merror\x1B[39m',
    stack: 'AxiosError: Request failed with status code 500\n' +
      '    at settle (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/adapters/http.js:570:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at endReadableNT (node:internal/streams/readable:1358:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:83:21)',
    timestamp: '2023-06-05T11:48:10.987Z'
  }
  {
    message: 'Request failed with status code 500',
    name: 'AxiosError',
    code: 'ERR_BAD_RESPONSE',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: null
      },
      validateStatus: [Function: validateStatus],
      headers: AxiosHeaders {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/1.4.0',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'get',
      url: 'http://localhost:4000/data',
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(async_id_symbol)]: 277366,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /data HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.4.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:4000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *4> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:4000:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(async_id_symbol)]: 277366,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(RequestTimeout)]: undefined
            },
            <ref *3> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [
                  [Function: onReadableStreamEnd],
                  [Function: socketOnEnd]
                ],
                free: [Function: onFree],
                close: [ [Function: onClose], [Function: socketCloseListener] ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                data: [Function: socketOnData],
                drain: [Function: ondrain]
              },
              _eventsCount: 8,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: <ref *5> HTTPParser {
                '0': null,
                '1': [Function: parserOnHeaders],
                '2': [Function: parserOnHeadersComplete],
                '3': [Function: parserOnBody],
                '4': [Function: parserOnMessageComplete],
                '5': null,
                '6': null,
                _headers: [],
                _url: '',
                socket: [Circular *3],
                incoming: null,
                outgoing: <ref *6> ClientRequest {
                  _events: [Object: null prototype] {
                    response: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    abort: [Function (anonymous)],
                    aborted: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    error: [Function (anonymous)],
                    socket: [Function (anonymous)],
                    timeout: [Function (anonymous)]
                  },
                  _eventsCount: 7,
                  _maxListeners: undefined,
                  outputData: [],
                  outputSize: 0,
                  writable: true,
                  destroyed: false,
                  _last: true,
                  chunkedEncoding: false,
                  shouldKeepAlive: false,
                  maxRequestsOnConnectionReached: false,
                  _defaultKeepAlive: true,
                  useChunkedEncodingByDefault: true,
                  sendDate: false,
                  _removedConnection: false,
                  _removedContLen: false,
                  _removedTE: false,
                  strictContentLength: false,
                  _contentLength: '804',
                  _hasBody: true,
                  _trailer: '',
                  finished: true,
                  _headerSent: true,
                  _closed: false,
                  socket: [Circular *3],
                  _header: 'PUT /rooms HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'User-Agent: axios/1.4.0\r\n' +
                    'Content-Length: 804\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:4000\r\n' +
                    'Connection: close\r\n' +
                    '\r\n',
                  _keepAliveTimeout: 0,
                  _onPendingData: [Function: nop],
                  agent: [Circular *4],
                  socketPath: undefined,
                  method: 'PUT',
                  maxHeaderSize: undefined,
                  insecureHTTPParser: undefined,
                  path: '/rooms',
                  _ended: false,
                  res: null,
                  aborted: false,
                  timeoutCb: null,
                  upgradeOrConnect: false,
                  parser: [Circular *5],
                  maxHeadersCount: null,
                  reusedSocket: false,
                  host: 'localhost',
                  protocol: 'http:',
                  _redirectable: Writable {
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: true,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: true,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    _events: [Object: null prototype] {
                      response: [Function: handleResponse],
                      error: [Function: handleRequestError],
                      socket: [Function: handleRequestSocket]
                    },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    _options: {
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'http:',
                      path: '/rooms',
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.4.0',
                        'Content-Length': '804',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      lookup: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'localhost',
                      port: '4000',
                      agent: undefined,
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] { path: null },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: {
                              map: {
                                'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 89 f7 fb b4 89 e5 9b 34 b1 2b 93 9a 83 82 83 f6 b5 19 31 8a 14 f9 9e 2d 00 cc 84 de 2f 38 17 e2 04 ... 1708 more bytes>
                              },
                              list: [ 'screeps.com:443:::::::::::::::::::::' ]
                            },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/rooms'
                    },
                    _ended: true,
                    _ending: true,
                    _redirectCount: 0,
                    _redirects: [],
                    _requestBodyLength: 804,
                    _requestBodyBuffers: [
                      {
                        data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 36 22 2c 22 45 33 4e 31 36 22 2c 22 45 36 4e 31 33 22 2c 22 ... 754 more bytes>,
                        encoding: undefined
                      }
                    ],
                    _onNativeResponse: [Function (anonymous)],
                    _currentRequest: [Circular *6],
                    _currentUrl: 'http://localhost:4000/rooms',
                    [Symbol(kCapture)]: false
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(kEndCalled)]: true,
                  [Symbol(kNeedDrain)]: false,
                  [Symbol(corked)]: 0,
                  [Symbol(kOutHeaders)]: [Object: null prototype] {
                    accept: [ 'Accept', 'application/json, text/plain, */*' ],
                    'content-type': [ 'Content-Type', 'application/json' ],
                    'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                    'content-length': [ 'Content-Length', '804' ],
                    'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                    host: [ 'Host', 'localhost:4000' ]
                  },
                  [Symbol(kUniqueHeaders)]: null
                },
                maxHeaderPairs: 2000,
                _consumed: false,
                onIncoming: [Function: parserOnIncomingClient],
                [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                  type: 'HTTPINCOMINGMESSAGE',
                  req: <ref *6> ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '804',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *3],
                    _header: 'PUT /rooms HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.4.0\r\n' +
                      'Content-Length: 804\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:4000\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *4],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    path: '/rooms',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: [Circular *5],
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'localhost',
                    protocol: 'http:',
                    _redirectable: Writable {
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: false,
                        decodeStrings: true,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: true,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: true,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      _events: [Object: null prototype] {
                        response: [Function: handleResponse],
                        error: [Function: handleRequestError],
                        socket: [Function: handleRequestSocket]
                      },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      _options: {
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'http:',
                        path: '/rooms',
                        method: 'PUT',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.4.0',
                          'Content-Length': '804',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        lookup: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'localhost',
                        port: '4000',
                        agent: undefined,
                        nativeProtocols: {
                          'http:': {
                            _connectionListener: [Function: connectionListener],
                            METHODS: [
                              'ACL',         'BIND',       'CHECKOUT',
                              'CONNECT',     'COPY',       'DELETE',
                              'GET',         'HEAD',       'LINK',
                              'LOCK',        'M-SEARCH',   'MERGE',
                              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                              'MOVE',        'NOTIFY',     'OPTIONS',
                              'PATCH',       'POST',       'PROPFIND',
                              'PROPPATCH',   'PURGE',      'PUT',
                              'REBIND',      'REPORT',     'SEARCH',
                              'SOURCE',      'SUBSCRIBE',  'TRACE',
                              'UNBIND',      'UNLINK',     'UNLOCK',
                              'UNSUBSCRIBE'
                            ],
                            STATUS_CODES: {
                              '100': 'Continue',
                              '101': 'Switching Protocols',
                              '102': 'Processing',
                              '103': 'Early Hints',
                              '200': 'OK',
                              '201': 'Created',
                              '202': 'Accepted',
                              '203': 'Non-Authoritative Information',
                              '204': 'No Content',
                              '205': 'Reset Content',
                              '206': 'Partial Content',
                              '207': 'Multi-Status',
                              '208': 'Already Reported',
                              '226': 'IM Used',
                              '300': 'Multiple Choices',
                              '301': 'Moved Permanently',
                              '302': 'Found',
                              '303': 'See Other',
                              '304': 'Not Modified',
                              '305': 'Use Proxy',
                              '307': 'Temporary Redirect',
                              '308': 'Permanent Redirect',
                              '400': 'Bad Request',
                              '401': 'Unauthorized',
                              '402': 'Payment Required',
                              '403': 'Forbidden',
                              '404': 'Not Found',
                              '405': 'Method Not Allowed',
                              '406': 'Not Acceptable',
                              '407': 'Proxy Authentication Required',
                              '408': 'Request Timeout',
                              '409': 'Conflict',
                              '410': 'Gone',
                              '411': 'Length Required',
                              '412': 'Precondition Failed',
                              '413': 'Payload Too Large',
                              '414': 'URI Too Long',
                              '415': 'Unsupported Media Type',
                              '416': 'Range Not Satisfiable',
                              '417': 'Expectation Failed',
                              '418': "I'm a Teapot",
                              '421': 'Misdirected Request',
                              '422': 'Unprocessable Entity',
                              '423': 'Locked',
                              '424': 'Failed Dependency',
                              '425': 'Too Early',
                              '426': 'Upgrade Required',
                              '428': 'Precondition Required',
                              '429': 'Too Many Requests',
                              '431': 'Request Header Fields Too Large',
                              '451': 'Unavailable For Legal Reasons',
                              '500': 'Internal Server Error',
                              '501': 'Not Implemented',
                              '502': 'Bad Gateway',
                              '503': 'Service Unavailable',
                              '504': 'Gateway Timeout',
                              '505': 'HTTP Version Not Supported',
                              '506': 'Variant Also Negotiates',
                              '507': 'Insufficient Storage',
                              '508': 'Loop Detected',
                              '509': 'Bandwidth Limit Exceeded',
                              '510': 'Not Extended',
                              '511': 'Network Authentication Required'
                            },
                            Agent: [Function: Agent] {
                              defaultMaxSockets: Infinity
                            },
                            ClientRequest: [Function: ClientRequest],
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            validateHeaderName: [Function: __node_internal_],
                            validateHeaderValue: [Function: __node_internal_],
                            get: [Function: get],
                            request: [Function: request],
                            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                            maxHeaderSize: [Getter],
                            globalAgent: [Getter/Setter]
                          },
                          'https:': {
                            Agent: [Function: Agent],
                            globalAgent: Agent {
                              _events: [Object: null prototype] {
                                free: [Function (anonymous)],
                                newListener: [Function: maybeEnableKeylog]
                              },
                              _eventsCount: 2,
                              _maxListeners: undefined,
                              defaultPort: 443,
                              protocol: 'https:',
                              options: [Object: null prototype] { path: null },
                              requests: [Object: null prototype] {},
                              sockets: [Object: null prototype] {},
                              freeSockets: [Object: null prototype] {},
                              keepAliveMsecs: 1000,
                              keepAlive: false,
                              maxSockets: Infinity,
                              maxFreeSockets: 256,
                              scheduling: 'lifo',
                              maxTotalSockets: Infinity,
                              totalSocketCount: 0,
                              maxCachedSessions: 100,
                              _sessionCache: {
                                map: {
                                  'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 89 f7 fb b4 89 e5 9b 34 b1 2b 93 9a 83 82 83 f6 b5 19 31 8a 14 f9 9e 2d 00 cc 84 de 2f 38 17 e2 04 ... 1708 more bytes>
                                },
                                list: [
                                  'screeps.com:443:::::::::::::::::::::'
                                ]
                              },
                              [Symbol(kCapture)]: false
                            },
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request]
                          }
                        },
                        pathname: '/rooms'
                      },
                      _ended: true,
                      _ending: true,
                      _redirectCount: 0,
                      _redirects: [],
                      _requestBodyLength: 804,
                      _requestBodyBuffers: [
                        {
                          data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 36 22 2c 22 45 33 4e 31 36 22 2c 22 45 36 4e 31 33 22 2c 22 ... 754 more bytes>,
                          encoding: undefined
                        }
                      ],
                      _onNativeResponse: [Function (anonymous)],
                      _currentRequest: [Circular *6],
                      _currentUrl: 'http://localhost:4000/rooms',
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kEndCalled)]: true,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                      'content-length': [ 'Content-Length', '804' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'localhost:4000' ]
                    },
                    [Symbol(kUniqueHeaders)]: null
                  }
                }
              },
              _httpMessage: <ref *6> ClientRequest {
                _events: [Object: null prototype] {
                  response: [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  abort: [Function (anonymous)],
                  aborted: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  error: [Function (anonymous)],
                  socket: [Function (anonymous)],
                  timeout: [Function (anonymous)]
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                outputData: [],
                outputSize: 0,
                writable: true,
                destroyed: false,
                _last: true,
                chunkedEncoding: false,
                shouldKeepAlive: false,
                maxRequestsOnConnectionReached: false,
                _defaultKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: false,
                _removedConnection: false,
                _removedContLen: false,
                _removedTE: false,
                strictContentLength: false,
                _contentLength: '804',
                _hasBody: true,
                _trailer: '',
                finished: true,
                _headerSent: true,
                _closed: false,
                socket: [Circular *3],
                _header: 'PUT /rooms HTTP/1.1\r\n' +
                  'Accept: application/json, text/plain, */*\r\n' +
                  'Content-Type: application/json\r\n' +
                  'User-Agent: axios/1.4.0\r\n' +
                  'Content-Length: 804\r\n' +
                  'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                  'Host: localhost:4000\r\n' +
                  'Connection: close\r\n' +
                  '\r\n',
                _keepAliveTimeout: 0,
                _onPendingData: [Function: nop],
                agent: [Circular *4],
                socketPath: undefined,
                method: 'PUT',
                maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                path: '/rooms',
                _ended: false,
                res: null,
                aborted: false,
                timeoutCb: null,
                upgradeOrConnect: false,
                parser: <ref *5> HTTPParser {
                  '0': null,
                  '1': [Function: parserOnHeaders],
                  '2': [Function: parserOnHeadersComplete],
                  '3': [Function: parserOnBody],
                  '4': [Function: parserOnMessageComplete],
                  '5': null,
                  '6': null,
                  _headers: [],
                  _url: '',
                  socket: [Circular *3],
                  incoming: null,
                  outgoing: [Circular *6],
                  maxHeaderPairs: 2000,
                  _consumed: false,
                  onIncoming: [Function: parserOnIncomingClient],
                  [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                    type: 'HTTPINCOMINGMESSAGE',
                    req: [Circular *6]
                  }
                },
                maxHeadersCount: null,
                reusedSocket: false,
                host: 'localhost',
                protocol: 'http:',
                _redirectable: Writable {
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: true,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: true,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  _events: [Object: null prototype] {
                    response: [Function: handleResponse],
                    error: [Function: handleRequestError],
                    socket: [Function: handleRequestSocket]
                  },
                  _eventsCount: 3,
                  _maxListeners: undefined,
                  _options: {
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'http:',
                    path: '/rooms',
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.4.0',
                      'Content-Length': '804',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    lookup: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'localhost',
                    port: '4000',
                    agent: undefined,
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] { path: null },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: {
                            map: {
                              'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 89 f7 fb b4 89 e5 9b 34 b1 2b 93 9a 83 82 83 f6 b5 19 31 8a 14 f9 9e 2d 00 cc 84 de 2f 38 17 e2 04 ... 1708 more bytes>
                            },
                            list: [ 'screeps.com:443:::::::::::::::::::::' ]
                          },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/rooms'
                  },
                  _ended: true,
                  _ending: true,
                  _redirectCount: 0,
                  _redirects: [],
                  _requestBodyLength: 804,
                  _requestBodyBuffers: [
                    {
                      data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 36 22 2c 22 45 33 4e 31 36 22 2c 22 45 36 4e 31 33 22 2c 22 ... 754 more bytes>,
                      encoding: undefined
                    }
                  ],
                  _onNativeResponse: [Function (anonymous)],
                  _currentRequest: [Circular *6],
                  _currentUrl: 'http://localhost:4000/rooms',
                  [Symbol(kCapture)]: false
                },
                [Symbol(kCapture)]: false,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(kEndCalled)]: true,
                [Symbol(kNeedDrain)]: false,
                [Symbol(corked)]: 0,
                [Symbol(kOutHeaders)]: [Object: null prototype] {
                  accept: [ 'Accept', 'application/json, text/plain, */*' ],
                  'content-type': [ 'Content-Type', 'application/json' ],
                  'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                  'content-length': [ 'Content-Length', '804' ],
                  'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                  host: [ 'Host', 'localhost:4000' ]
                },
                [Symbol(kUniqueHeaders)]: null
              },
              [Symbol(async_id_symbol)]: 277738,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *3]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 2,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/data',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 277366,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Content-Type',
          'application/json; charset=utf-8',
          'Content-Length',
          '20',
          'ETag',
          'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          'Date',
          'Mon, 05 Jun 2023 12:58:53 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Internal Server Error',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 277366,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://localhost:4000/data',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'content-type': 'application/json; charset=utf-8',
          'content-length': '20',
          etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
          date: 'Mon, 05 Jun 2023 12:58:53 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 12,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/data',
          method: 'GET',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.4.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          lookup: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'localhost',
          port: '4000',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 89 f7 fb b4 89 e5 9b 34 b1 2b 93 9a 83 82 83 f6 b5 19 31 8a 14 f9 9e 2d 00 cc 84 de 2f 38 17 e2 04 ... 1708 more bytes>
                  },
                  list: [ 'screeps.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/data'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://localhost:4000/data',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kEndCalled)]: true,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:4000' ]
      },
      [Symbol(kUniqueHeaders)]: null
    },
    response: {
      status: 500,
      statusText: 'Internal Server Error',
      headers: AxiosHeaders {
        'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '20',
        etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
        date: 'Mon, 05 Jun 2023 12:58:53 GMT',
        connection: 'close'
      },
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: null
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.4.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'get',
        url: 'http://localhost:4000/data',
        data: undefined
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 277366,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        _header: 'GET /data HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'User-Agent: axios/1.4.0\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:4000\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *4> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:4000:': [
              <ref *2> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(async_id_symbol)]: 277366,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(RequestTimeout)]: undefined
              },
              <ref *3> Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [
                    [Function: onReadableStreamEnd],
                    [Function: socketOnEnd]
                  ],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  data: [Function: socketOnData],
                  drain: [Function: ondrain]
                },
                _eventsCount: 8,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: false,
                  needDrain: false,
                  ending: false,
                  ended: false,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: <ref *5> HTTPParser {
                  '0': null,
                  '1': [Function: parserOnHeaders],
                  '2': [Function: parserOnHeadersComplete],
                  '3': [Function: parserOnBody],
                  '4': [Function: parserOnMessageComplete],
                  '5': null,
                  '6': null,
                  _headers: [],
                  _url: '',
                  socket: [Circular *3],
                  incoming: null,
                  outgoing: <ref *6> ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '804',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *3],
                    _header: 'PUT /rooms HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.4.0\r\n' +
                      'Content-Length: 804\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:4000\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *4],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    path: '/rooms',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: [Circular *5],
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'localhost',
                    protocol: 'http:',
                    _redirectable: Writable {
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: false,
                        decodeStrings: true,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: true,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: true,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      _events: [Object: null prototype] {
                        response: [Function: handleResponse],
                        error: [Function: handleRequestError],
                        socket: [Function: handleRequestSocket]
                      },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      _options: {
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'http:',
                        path: '/rooms',
                        method: 'PUT',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.4.0',
                          'Content-Length': '804',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        lookup: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'localhost',
                        port: '4000',
                        agent: undefined,
                        nativeProtocols: {
                          'http:': {
                            _connectionListener: [Function: connectionListener],
                            METHODS: [
                              'ACL',         'BIND',       'CHECKOUT',
                              'CONNECT',     'COPY',       'DELETE',
                              'GET',         'HEAD',       'LINK',
                              'LOCK',        'M-SEARCH',   'MERGE',
                              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                              'MOVE',        'NOTIFY',     'OPTIONS',
                              'PATCH',       'POST',       'PROPFIND',
                              'PROPPATCH',   'PURGE',      'PUT',
                              'REBIND',      'REPORT',     'SEARCH',
                              'SOURCE',      'SUBSCRIBE',  'TRACE',
                              'UNBIND',      'UNLINK',     'UNLOCK',
                              'UNSUBSCRIBE'
                            ],
                            STATUS_CODES: {
                              '100': 'Continue',
                              '101': 'Switching Protocols',
                              '102': 'Processing',
                              '103': 'Early Hints',
                              '200': 'OK',
                              '201': 'Created',
                              '202': 'Accepted',
                              '203': 'Non-Authoritative Information',
                              '204': 'No Content',
                              '205': 'Reset Content',
                              '206': 'Partial Content',
                              '207': 'Multi-Status',
                              '208': 'Already Reported',
                              '226': 'IM Used',
                              '300': 'Multiple Choices',
                              '301': 'Moved Permanently',
                              '302': 'Found',
                              '303': 'See Other',
                              '304': 'Not Modified',
                              '305': 'Use Proxy',
                              '307': 'Temporary Redirect',
                              '308': 'Permanent Redirect',
                              '400': 'Bad Request',
                              '401': 'Unauthorized',
                              '402': 'Payment Required',
                              '403': 'Forbidden',
                              '404': 'Not Found',
                              '405': 'Method Not Allowed',
                              '406': 'Not Acceptable',
                              '407': 'Proxy Authentication Required',
                              '408': 'Request Timeout',
                              '409': 'Conflict',
                              '410': 'Gone',
                              '411': 'Length Required',
                              '412': 'Precondition Failed',
                              '413': 'Payload Too Large',
                              '414': 'URI Too Long',
                              '415': 'Unsupported Media Type',
                              '416': 'Range Not Satisfiable',
                              '417': 'Expectation Failed',
                              '418': "I'm a Teapot",
                              '421': 'Misdirected Request',
                              '422': 'Unprocessable Entity',
                              '423': 'Locked',
                              '424': 'Failed Dependency',
                              '425': 'Too Early',
                              '426': 'Upgrade Required',
                              '428': 'Precondition Required',
                              '429': 'Too Many Requests',
                              '431': 'Request Header Fields Too Large',
                              '451': 'Unavailable For Legal Reasons',
                              '500': 'Internal Server Error',
                              '501': 'Not Implemented',
                              '502': 'Bad Gateway',
                              '503': 'Service Unavailable',
                              '504': 'Gateway Timeout',
                              '505': 'HTTP Version Not Supported',
                              '506': 'Variant Also Negotiates',
                              '507': 'Insufficient Storage',
                              '508': 'Loop Detected',
                              '509': 'Bandwidth Limit Exceeded',
                              '510': 'Not Extended',
                              '511': 'Network Authentication Required'
                            },
                            Agent: [Function: Agent] {
                              defaultMaxSockets: Infinity
                            },
                            ClientRequest: [Function: ClientRequest],
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            validateHeaderName: [Function: __node_internal_],
                            validateHeaderValue: [Function: __node_internal_],
                            get: [Function: get],
                            request: [Function: request],
                            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                            maxHeaderSize: [Getter],
                            globalAgent: [Getter/Setter]
                          },
                          'https:': {
                            Agent: [Function: Agent],
                            globalAgent: Agent {
                              _events: [Object: null prototype] {
                                free: [Function (anonymous)],
                                newListener: [Function: maybeEnableKeylog]
                              },
                              _eventsCount: 2,
                              _maxListeners: undefined,
                              defaultPort: 443,
                              protocol: 'https:',
                              options: [Object: null prototype] { path: null },
                              requests: [Object: null prototype] {},
                              sockets: [Object: null prototype] {},
                              freeSockets: [Object: null prototype] {},
                              keepAliveMsecs: 1000,
                              keepAlive: false,
                              maxSockets: Infinity,
                              maxFreeSockets: 256,
                              scheduling: 'lifo',
                              maxTotalSockets: Infinity,
                              totalSocketCount: 0,
                              maxCachedSessions: 100,
                              _sessionCache: {
                                map: {
                                  'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 89 f7 fb b4 89 e5 9b 34 b1 2b 93 9a 83 82 83 f6 b5 19 31 8a 14 f9 9e 2d 00 cc 84 de 2f 38 17 e2 04 ... 1708 more bytes>
                                },
                                list: [
                                  'screeps.com:443:::::::::::::::::::::'
                                ]
                              },
                              [Symbol(kCapture)]: false
                            },
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request]
                          }
                        },
                        pathname: '/rooms'
                      },
                      _ended: true,
                      _ending: true,
                      _redirectCount: 0,
                      _redirects: [],
                      _requestBodyLength: 804,
                      _requestBodyBuffers: [
                        {
                          data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 36 22 2c 22 45 33 4e 31 36 22 2c 22 45 36 4e 31 33 22 2c 22 ... 754 more bytes>,
                          encoding: undefined
                        }
                      ],
                      _onNativeResponse: [Function (anonymous)],
                      _currentRequest: [Circular *6],
                      _currentUrl: 'http://localhost:4000/rooms',
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kEndCalled)]: true,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                      'content-length': [ 'Content-Length', '804' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'localhost:4000' ]
                    },
                    [Symbol(kUniqueHeaders)]: null
                  },
                  maxHeaderPairs: 2000,
                  _consumed: false,
                  onIncoming: [Function: parserOnIncomingClient],
                  [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                    type: 'HTTPINCOMINGMESSAGE',
                    req: <ref *6> ClientRequest {
                      _events: [Object: null prototype] {
                        response: [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        abort: [Function (anonymous)],
                        aborted: [Function (anonymous)],
                        connect: [Function (anonymous)],
                        error: [Function (anonymous)],
                        socket: [Function (anonymous)],
                        timeout: [Function (anonymous)]
                      },
                      _eventsCount: 7,
                      _maxListeners: undefined,
                      outputData: [],
                      outputSize: 0,
                      writable: true,
                      destroyed: false,
                      _last: true,
                      chunkedEncoding: false,
                      shouldKeepAlive: false,
                      maxRequestsOnConnectionReached: false,
                      _defaultKeepAlive: true,
                      useChunkedEncodingByDefault: true,
                      sendDate: false,
                      _removedConnection: false,
                      _removedContLen: false,
                      _removedTE: false,
                      strictContentLength: false,
                      _contentLength: '804',
                      _hasBody: true,
                      _trailer: '',
                      finished: true,
                      _headerSent: true,
                      _closed: false,
                      socket: [Circular *3],
                      _header: 'PUT /rooms HTTP/1.1\r\n' +
                        'Accept: application/json, text/plain, */*\r\n' +
                        'Content-Type: application/json\r\n' +
                        'User-Agent: axios/1.4.0\r\n' +
                        'Content-Length: 804\r\n' +
                        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                        'Host: localhost:4000\r\n' +
                        'Connection: close\r\n' +
                        '\r\n',
                      _keepAliveTimeout: 0,
                      _onPendingData: [Function: nop],
                      agent: [Circular *4],
                      socketPath: undefined,
                      method: 'PUT',
                      maxHeaderSize: undefined,
                      insecureHTTPParser: undefined,
                      path: '/rooms',
                      _ended: false,
                      res: null,
                      aborted: false,
                      timeoutCb: null,
                      upgradeOrConnect: false,
                      parser: [Circular *5],
                      maxHeadersCount: null,
                      reusedSocket: false,
                      host: 'localhost',
                      protocol: 'http:',
                      _redirectable: Writable {
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: true,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        _events: [Object: null prototype] {
                          response: [Function: handleResponse],
                          error: [Function: handleRequestError],
                          socket: [Function: handleRequestSocket]
                        },
                        _eventsCount: 3,
                        _maxListeners: undefined,
                        _options: {
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'http:',
                          path: '/rooms',
                          method: 'PUT',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            'User-Agent': 'axios/1.4.0',
                            'Content-Length': '804',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          family: undefined,
                          lookup: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'localhost',
                          port: '4000',
                          agent: undefined,
                          nativeProtocols: {
                            'http:': {
                              _connectionListener: [Function: connectionListener],
                              METHODS: [
                                'ACL',         'BIND',       'CHECKOUT',
                                'CONNECT',     'COPY',       'DELETE',
                                'GET',         'HEAD',       'LINK',
                                'LOCK',        'M-SEARCH',   'MERGE',
                                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                                'MOVE',        'NOTIFY',     'OPTIONS',
                                'PATCH',       'POST',       'PROPFIND',
                                'PROPPATCH',   'PURGE',      'PUT',
                                'REBIND',      'REPORT',     'SEARCH',
                                'SOURCE',      'SUBSCRIBE',  'TRACE',
                                'UNBIND',      'UNLINK',     'UNLOCK',
                                'UNSUBSCRIBE'
                              ],
                              STATUS_CODES: {
                                '100': 'Continue',
                                '101': 'Switching Protocols',
                                '102': 'Processing',
                                '103': 'Early Hints',
                                '200': 'OK',
                                '201': 'Created',
                                '202': 'Accepted',
                                '203': 'Non-Authoritative Information',
                                '204': 'No Content',
                                '205': 'Reset Content',
                                '206': 'Partial Content',
                                '207': 'Multi-Status',
                                '208': 'Already Reported',
                                '226': 'IM Used',
                                '300': 'Multiple Choices',
                                '301': 'Moved Permanently',
                                '302': 'Found',
                                '303': 'See Other',
                                '304': 'Not Modified',
                                '305': 'Use Proxy',
                                '307': 'Temporary Redirect',
                                '308': 'Permanent Redirect',
                                '400': 'Bad Request',
                                '401': 'Unauthorized',
                                '402': 'Payment Required',
                                '403': 'Forbidden',
                                '404': 'Not Found',
                                '405': 'Method Not Allowed',
                                '406': 'Not Acceptable',
                                '407': 'Proxy Authentication Required',
                                '408': 'Request Timeout',
                                '409': 'Conflict',
                                '410': 'Gone',
                                '411': 'Length Required',
                                '412': 'Precondition Failed',
                                '413': 'Payload Too Large',
                                '414': 'URI Too Long',
                                '415': 'Unsupported Media Type',
                                '416': 'Range Not Satisfiable',
                                '417': 'Expectation Failed',
                                '418': "I'm a Teapot",
                                '421': 'Misdirected Request',
                                '422': 'Unprocessable Entity',
                                '423': 'Locked',
                                '424': 'Failed Dependency',
                                '425': 'Too Early',
                                '426': 'Upgrade Required',
                                '428': 'Precondition Required',
                                '429': 'Too Many Requests',
                                '431': 'Request Header Fields Too Large',
                                '451': 'Unavailable For Legal Reasons',
                                '500': 'Internal Server Error',
                                '501': 'Not Implemented',
                                '502': 'Bad Gateway',
                                '503': 'Service Unavailable',
                                '504': 'Gateway Timeout',
                                '505': 'HTTP Version Not Supported',
                                '506': 'Variant Also Negotiates',
                                '507': 'Insufficient Storage',
                                '508': 'Loop Detected',
                                '509': 'Bandwidth Limit Exceeded',
                                '510': 'Not Extended',
                                '511': 'Network Authentication Required'
                              },
                              Agent: [Function: Agent] {
                                defaultMaxSockets: Infinity
                              },
                              ClientRequest: [Function: ClientRequest],
                              IncomingMessage: [Function: IncomingMessage],
                              OutgoingMessage: [Function: OutgoingMessage],
                              Server: [Function: Server],
                              ServerResponse: [Function: ServerResponse],
                              createServer: [Function: createServer],
                              validateHeaderName: [Function: __node_internal_],
                              validateHeaderValue: [Function: __node_internal_],
                              get: [Function: get],
                              request: [Function: request],
                              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                              maxHeaderSize: [Getter],
                              globalAgent: [Getter/Setter]
                            },
                            'https:': {
                              Agent: [Function: Agent],
                              globalAgent: Agent {
                                _events: [Object: null prototype] {
                                  free: [Function (anonymous)],
                                  newListener: [Function: maybeEnableKeylog]
                                },
                                _eventsCount: 2,
                                _maxListeners: undefined,
                                defaultPort: 443,
                                protocol: 'https:',
                                options: [Object: null prototype] { path: null },
                                requests: [Object: null prototype] {},
                                sockets: [Object: null prototype] {},
                                freeSockets: [Object: null prototype] {},
                                keepAliveMsecs: 1000,
                                keepAlive: false,
                                maxSockets: Infinity,
                                maxFreeSockets: 256,
                                scheduling: 'lifo',
                                maxTotalSockets: Infinity,
                                totalSocketCount: 0,
                                maxCachedSessions: 100,
                                _sessionCache: {
                                  map: {
                                    'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 89 f7 fb b4 89 e5 9b 34 b1 2b 93 9a 83 82 83 f6 b5 19 31 8a 14 f9 9e 2d 00 cc 84 de 2f 38 17 e2 04 ... 1708 more bytes>
                                  },
                                  list: [
                                    'screeps.com:443:::::::::::::::::::::'
                                  ]
                                },
                                [Symbol(kCapture)]: false
                              },
                              Server: [Function: Server],
                              createServer: [Function: createServer],
                              get: [Function: get],
                              request: [Function: request]
                            }
                          },
                          pathname: '/rooms'
                        },
                        _ended: true,
                        _ending: true,
                        _redirectCount: 0,
                        _redirects: [],
                        _requestBodyLength: 804,
                        _requestBodyBuffers: [
                          {
                            data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 36 22 2c 22 45 33 4e 31 36 22 2c 22 45 36 4e 31 33 22 2c 22 ... 754 more bytes>,
                            encoding: undefined
                          }
                        ],
                        _onNativeResponse: [Function (anonymous)],
                        _currentRequest: [Circular *6],
                        _currentUrl: 'http://localhost:4000/rooms',
                        [Symbol(kCapture)]: false
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(kEndCalled)]: true,
                      [Symbol(kNeedDrain)]: false,
                      [Symbol(corked)]: 0,
                      [Symbol(kOutHeaders)]: [Object: null prototype] {
                        accept: [ 'Accept', 'application/json, text/plain, */*' ],
                        'content-type': [ 'Content-Type', 'application/json' ],
                        'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                        'content-length': [ 'Content-Length', '804' ],
                        'accept-encoding': [
                          'Accept-Encoding',
                          'gzip, compress, deflate, br'
                        ],
                        host: [ 'Host', 'localhost:4000' ]
                      },
                      [Symbol(kUniqueHeaders)]: null
                    }
                  }
                },
                _httpMessage: <ref *6> ClientRequest {
                  _events: [Object: null prototype] {
                    response: [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    abort: [Function (anonymous)],
                    aborted: [Function (anonymous)],
                    connect: [Function (anonymous)],
                    error: [Function (anonymous)],
                    socket: [Function (anonymous)],
                    timeout: [Function (anonymous)]
                  },
                  _eventsCount: 7,
                  _maxListeners: undefined,
                  outputData: [],
                  outputSize: 0,
                  writable: true,
                  destroyed: false,
                  _last: true,
                  chunkedEncoding: false,
                  shouldKeepAlive: false,
                  maxRequestsOnConnectionReached: false,
                  _defaultKeepAlive: true,
                  useChunkedEncodingByDefault: true,
                  sendDate: false,
                  _removedConnection: false,
                  _removedContLen: false,
                  _removedTE: false,
                  strictContentLength: false,
                  _contentLength: '804',
                  _hasBody: true,
                  _trailer: '',
                  finished: true,
                  _headerSent: true,
                  _closed: false,
                  socket: [Circular *3],
                  _header: 'PUT /rooms HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'User-Agent: axios/1.4.0\r\n' +
                    'Content-Length: 804\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:4000\r\n' +
                    'Connection: close\r\n' +
                    '\r\n',
                  _keepAliveTimeout: 0,
                  _onPendingData: [Function: nop],
                  agent: [Circular *4],
                  socketPath: undefined,
                  method: 'PUT',
                  maxHeaderSize: undefined,
                  insecureHTTPParser: undefined,
                  path: '/rooms',
                  _ended: false,
                  res: null,
                  aborted: false,
                  timeoutCb: null,
                  upgradeOrConnect: false,
                  parser: <ref *5> HTTPParser {
                    '0': null,
                    '1': [Function: parserOnHeaders],
                    '2': [Function: parserOnHeadersComplete],
                    '3': [Function: parserOnBody],
                    '4': [Function: parserOnMessageComplete],
                    '5': null,
                    '6': null,
                    _headers: [],
                    _url: '',
                    socket: [Circular *3],
                    incoming: null,
                    outgoing: [Circular *6],
                    maxHeaderPairs: 2000,
                    _consumed: false,
                    onIncoming: [Function: parserOnIncomingClient],
                    [Symbol(resource_symbol)]: HTTPClientAsyncResource {
                      type: 'HTTPINCOMINGMESSAGE',
                      req: [Circular *6]
                    }
                  },
                  maxHeadersCount: null,
                  reusedSocket: false,
                  host: 'localhost',
                  protocol: 'http:',
                  _redirectable: Writable {
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: true,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: true,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    _events: [Object: null prototype] {
                      response: [Function: handleResponse],
                      error: [Function: handleRequestError],
                      socket: [Function: handleRequestSocket]
                    },
                    _eventsCount: 3,
                    _maxListeners: undefined,
                    _options: {
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'http:',
                      path: '/rooms',
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.4.0',
                        'Content-Length': '804',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      lookup: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'localhost',
                      port: '4000',
                      agent: undefined,
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] { path: null },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: {
                              map: {
                                'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 89 f7 fb b4 89 e5 9b 34 b1 2b 93 9a 83 82 83 f6 b5 19 31 8a 14 f9 9e 2d 00 cc 84 de 2f 38 17 e2 04 ... 1708 more bytes>
                              },
                              list: [ 'screeps.com:443:::::::::::::::::::::' ]
                            },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/rooms'
                    },
                    _ended: true,
                    _ending: true,
                    _redirectCount: 0,
                    _redirects: [],
                    _requestBodyLength: 804,
                    _requestBodyBuffers: [
                      {
                        data: <Buffer 7b 22 72 6f 6f 6d 73 22 3a 7b 22 73 68 61 72 64 53 65 61 73 6f 6e 22 3a 5b 22 45 31 33 4e 36 22 2c 22 45 33 4e 31 36 22 2c 22 45 36 4e 31 33 22 2c 22 ... 754 more bytes>,
                        encoding: undefined
                      }
                    ],
                    _onNativeResponse: [Function (anonymous)],
                    _currentRequest: [Circular *6],
                    _currentUrl: 'http://localhost:4000/rooms',
                    [Symbol(kCapture)]: false
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(kEndCalled)]: true,
                  [Symbol(kNeedDrain)]: false,
                  [Symbol(corked)]: 0,
                  [Symbol(kOutHeaders)]: [Object: null prototype] {
                    accept: [ 'Accept', 'application/json, text/plain, */*' ],
                    'content-type': [ 'Content-Type', 'application/json' ],
                    'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
                    'content-length': [ 'Content-Length', '804' ],
                    'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                    host: [ 'Host', 'localhost:4000' ]
                  },
                  [Symbol(kUniqueHeaders)]: null
                },
                [Symbol(async_id_symbol)]: 277738,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *3]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 2,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'GET',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        path: '/data',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 277366,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'X-Powered-By',
            'Express',
            'Content-Type',
            'application/json; charset=utf-8',
            'Content-Length',
            '20',
            'ETag',
            'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            'Date',
            'Mon, 05 Jun 2023 12:58:53 GMT',
            'Connection',
            'close'
          ],
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 500,
          statusMessage: 'Internal Server Error',
          client: <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 277366,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'http://localhost:4000/data',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            'x-powered-by': 'Express',
            'content-type': 'application/json; charset=utf-8',
            'content-length': '20',
            etag: 'W/"14-cwmMbGDFtczHWHormCGkciCMDGw"',
            date: 'Mon, 05 Jun 2023 12:58:53 GMT',
            connection: 'close'
          },
          [Symbol(kHeadersCount)]: 12,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0,
          [Symbol(RequestTimeout)]: undefined
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'http:',
            path: '/data',
            method: 'GET',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/1.4.0',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            lookup: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'localhost',
            port: '4000',
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'screeps.com:443:::::::::::::::::::::': <Buffer 30 82 06 da 02 01 01 02 02 03 03 04 02 c0 30 04 20 89 f7 fb b4 89 e5 9b 34 b1 2b 93 9a 83 82 83 f6 b5 19 31 8a 14 f9 9e 2d 00 cc 84 de 2f 38 17 e2 04 ... 1708 more bytes>
                    },
                    list: [ 'screeps.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/data'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 0,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'http://localhost:4000/data',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'user-agent': [ 'User-Agent', 'axios/1.4.0' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:4000' ]
        },
        [Symbol(kUniqueHeaders)]: null
      },
      data: 'Failed to get data'
    },
    level: '\x1B[31merror\x1B[39m',
    stack: 'AxiosError: Request failed with status code 500\n' +
      '    at settle (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (file:///root/Instances/Screeps-User-Tracker/controller/node_modules/axios/lib/adapters/http.js:570:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at endReadableNT (node:internal/streams/readable:1358:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:83:21)',
    timestamp: '2023-06-05T12:58:53.598Z'
  }
  